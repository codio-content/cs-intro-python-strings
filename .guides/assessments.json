[
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-976098584",
  "source": {
   "name": "lab question 1 fundamentals",
   "showName": false,
   "instructions": "## Lab Question\nSelect all of the correct ways a string can be declared. **Hint**, there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "63a1dad0-c1c9-fb74-0e42-1e1e86175ea9",
     "correct": true,
     "answer": "my_string = \"I am a string\""
    },
    {
     "_id": "83112ff9-d5a2-7f91-8f67-ba29549e16d9",
     "correct": false,
     "answer": "my_string = \"I am a string'"
    },
    {
     "_id": "e8c05ead-5430-47fe-8c0d-5c35681328fd",
     "correct": true,
     "answer": "my_string = '\"I am a string\"'"
    },
    {
     "_id": "2cf7c3e6-9347-43d3-d3d3-d0d085c31952",
     "correct": true,
     "answer": "my_string = 'I am a string'"
    }
   ],
   "guidance": "Strings can be declared with either single or double quotes. However, you must be consistent. If you start with a single quote, end with a single quote. The same is true for double quotes. \n\n```python\nmy_string = 'I am a string'\nmy_string = \"I am a string\"\n```\n\nYou can have both single and double quotes as long as you are consistent. The outer quotes must match just as the inner quotes must match. That is why the line of code below is also correct.\n\n```python\nmy_string = '\"I am a string\"'\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Declaring strings"
     }
    ],
    "files": [
     "code/fundamentals/lab-print.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/lab-print.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify which quotes can be used to declare a string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1694007804",
  "source": {
   "name": "lab question 2 fundamentals",
   "showName": false,
   "instructions": "## Lab Question\nWhat are the rules for variable names in Python? **Hint**, there are more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "72d06037-074e-55b3-89b2-6dd02a3439c3",
     "correct": true,
     "answer": "You cannot use a keyword"
    },
    {
     "_id": "1939e00e-a091-a19f-fd64-a1063f17eac5",
     "correct": false,
     "answer": "You must use capital letters"
    },
    {
     "_id": "df338ea4-bb95-9f98-6627-6976decc967b",
     "correct": true,
     "answer": "The variable name must start with a letter or an underscore"
    },
    {
     "_id": "77af80f6-81e7-9a06-5db7-8680a85cd8c9",
     "correct": false,
     "answer": "Variable names must be a noun"
    },
    {
     "_id": "ebfc943b-5e7d-c5d6-89ba-0950f13924f5",
     "correct": true,
     "answer": "The rest of the variable name can only be letters, numbers, or an underscore"
    }
   ],
   "guidance": "There are three rules for creating a variable name:\n1) You cannot use a Python keyword\n2) The variable name must start with a letter or an underscore\n3) The rest of the variable name can be letters, numbers, or an underscore",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Declaring Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Variable naming rules"
     }
    ],
    "files": [
     "code/fundamentals/lab-variables.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/lab-variables.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the rules for making a variable name"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2141727151",
  "source": {
   "name": "lab question 2 operators",
   "showName": false,
   "instructions": "## Lab Question\nWhich of the following operators **cannot** be used with strings?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "afe9075a-3566-5f07-9d5e-aab0268de4bf",
     "correct": false,
     "answer": "`+`"
    },
    {
     "_id": "0734ebf1-f20c-3e6e-a8c3-8037f02d472a",
     "correct": false,
     "answer": "`*`"
    },
    {
     "_id": "6e9c9b0a-05fc-1372-e9b4-af78f734b840",
     "correct": true,
     "answer": "`/`"
    }
   ],
   "guidance": "The `/` (division) operator can only be used with numbers. When used with strings, the `+` operator becomes concatenation and the `*` operator repeats a string.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String operators"
     }
    ],
    "files": [
     "code/operators/lab-strings.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-strings.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the operators that can be used with strings"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3300199222",
  "source": {
   "name": "lab question 1 loops",
   "showName": false,
   "instructions": "Arrange the blocks below so that the output will be:\n\n```python\nHere is the word 'Hello' 15 times:\nHello Hello Hello\nHello Hello Hello\nHello Hello Hello\nHello Hello Hello\nHello Hello Hello\n```",
   "initial": "my_string = \"Here is the word 'Hello' 15 times:\"\nprint(my_string)\nfor i in range(0, 5):\n    print(\"Hello \" * 3)",
   "options": "{\n  \"sortableId\": \"sortable\"\n}",
   "grader": "",
   "guidance": "1) Declare the variable `my_string`\n2) Print `my_string`\n3) Create a for loop that runs 5 times\n4) Print `Hello Hello Hello`\n\n```python\nmy_string = \"Here is the word 'Hello' 15 times:\"\nprint(my_string)\nfor i in range(0, 5):\n    print(\"Hello \" * 3)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "For loops"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "for loop syntax"
     }
    ],
    "files": [
     "code/loops/lab-1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/lab-1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT construct a for loop"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2436923214",
  "source": {
   "name": "reading question string basics",
   "showName": false,
   "instructions": "## Reading Question\nAnswer the following questions about strings by filling in the blanks.",
   "text": "Strings are composed of a sequence of <<<characters>>>.\nAll strings have a <<<length>>>.\nIndividual characters are referenced with an <<<index>>>.",
   "guidance": "Here are the three properties of strings:\n1) All strings are a sequence of characters\n2) All strings have a length (the total number of characters).\n3) Characters in a string are referenced with an index.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String properties"
     }
    ],
    "files": [
     "code/strings/string-properties.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-properties.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the three properties of a string",
   "tokens": {
    "blank": [
     "characters",
     "length",
     "index"
    ],
    "text": [
     "Strings are composed of a sequence of ",
     0,
     ".\nAll strings have a ",
     0,
     ".\nIndividual characters are referenced with an ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2380152059",
  "source": {
   "name": "reading question multiline strings",
   "showName": false,
   "instructions": "## Reading Question\nWhat is the difference between using `\\` and `\"\"\"` when making multiline strings?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "acdd2ade-a3b5-674f-c1fe-3e0ee400cc2f",
     "correct": false,
     "answer": "There is no difference."
    },
    {
     "_id": "ed02d033-7c5c-57d7-e578-ea8deb895048",
     "correct": false,
     "answer": "The `\\` preserves whitespace, while the `\"\"\"` allows you to continue writing the string on the next line."
    },
    {
     "_id": "6453e77c-faeb-5eff-306a-c6cfdd8d7031",
     "correct": false,
     "answer": "`\"\"\"` limits you to 79 characters, while `\\` adds a newline character."
    },
    {
     "_id": "fbf62b74-d503-8430-9711-ebd12e428552",
     "correct": true,
     "answer": "The `\"\"\"` preserves whitespace, while the `\\` allows you to continue writing the string on the next line."
    }
   ],
   "guidance": "The triple quote (`\"\"\"`) is used to create a string that preserves whitespace. Your string can go across multiple lines and have whatever indentation you would like.\n\nThe backslash (`\\`) is used to continue writing a string on the next line. The Python community typically types 79 characters per line. Use the backslash if your string is longer than 79 characters.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/strings/string-multiline.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-multiline.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT write a multiline string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2460911919",
  "source": {
   "name": "reading question immutability",
   "showName": false,
   "instructions": "## Reading Question\nWhat does it mean that a string is immutable?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6ca2cb22-2d0a-16bb-40a0-04da97dc82eb",
     "correct": false,
     "answer": "You cannot assign a variable a new string value"
    },
    {
     "_id": "37e8fcb6-305f-60c4-7043-c413e0df189a",
     "correct": true,
     "answer": "You cannot modify characters in a string"
    },
    {
     "_id": "35b1f717-408f-5a69-ae6c-0cbd63f03cf1",
     "correct": false,
     "answer": "You can change the individual characters in a string"
    },
    {
     "_id": "f462d4c6-e0a4-f6f4-2067-1b1c2ccf28d2",
     "correct": false,
     "answer": "You can assign a variable a new string value"
    }
   ],
   "guidance": "A string is immutable because you cannot alter individual characters. For example, `my_string[0] = \"A\"` is trying to change the first character of a string to `A`. ",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Immutability"
     }
    ],
    "files": [
     "code/strings/immutability.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/immutability.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define string immutability"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2648320213",
  "source": {
   "name": "reading question escape characters",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of the ways to make a contraction (`It's`) inside a string declaration. **Hint**, there are more than one correct response.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "59ece00c-b9e7-c44c-cabc-6ffd4c853435",
     "correct": true,
     "answer": "`my_string = \"It's my birthday today!\"`"
    },
    {
     "_id": "a30b5bb0-ec9d-3d11-935d-700822749c39",
     "correct": false,
     "answer": "`my_string = 'It's my birthday today!'`"
    },
    {
     "_id": "e130b0de-cbf7-f5fc-e23a-2fa78d440b99",
     "correct": false,
     "answer": "`my_string = \"It/'s my birthday today!\"`"
    },
    {
     "_id": "7c61a796-06e0-ec3e-e51a-b1724a1704d5",
     "correct": true,
     "answer": "`my_string = 'It\\'s my birthday today!'`"
    }
   ],
   "guidance": "There are two possible ways to make a contraction inside a string.\n1) Use double quotation marks for the string declaration and a single quote for the contraction. `my_string = \"It's my birthday today!\"\n2) Use single quotation marks for the string declaration and the escape character for the contraction. `my_string = 'It\\'s my birthday today!'`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Escape characters"
     }
    ],
    "files": [
     "code/strings/escape-characters.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/escape-characters.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use quotes inside quotes"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3496110909",
  "source": {
   "name": "reading question strip method",
   "showName": false,
   "instructions": "## Reading Question\nAssume you have the string `my_string = \"The cat in the hat\"`. Which of the strip methods below **would not** modify `my_string`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "9dcda578-dc17-b6e1-e1df-3fecf688d1e1",
     "correct": false,
     "answer": "my_string.strip(\"The\")"
    },
    {
     "_id": "5e4b42e3-709a-f745-393d-8e6113f4b750",
     "correct": true,
     "answer": "my_string.strip(\"cat\")"
    },
    {
     "_id": "8beaa416-aa23-7a11-6c8b-f9c344e1ebce",
     "correct": false,
     "answer": "my_string.strip(\"hat\")"
    },
    {
     "_id": "66f68856-57f0-9e72-2857-85b0440076ff",
     "correct": false,
     "answer": "my_string.strip(\"the hat\")"
    }
   ],
   "guidance": "The `strip` method only removes characters from the beginning or the end of a string. The only option that has characters not at the beginning or the end was `my_string.strip(\"cat\")`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "strip method, string methods"
     }
    ],
    "files": [
     "code/strings/join-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/join-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT recognize the limits of the strip method"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2673636806",
  "source": {
   "name": "reading question upper method",
   "showName": false,
   "instructions": "## Reading Question\nHow does the `upper` method work if strings are immutable?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "0cf35663-7870-a8a7-957a-310fc8582d66",
     "correct": false,
     "answer": "`upper` is an exception, and modifies the original string"
    },
    {
     "_id": "4d0585af-0377-031f-d97c-ebce5e2093b2",
     "correct": false,
     "answer": "`upper` deletes the original string and replaces it with a modified string."
    },
    {
     "_id": "269d0514-ba60-947a-f4ca-5c67f1c15b25",
     "correct": false,
     "answer": "Because the string has all the same characters, it's not really modifying the original string."
    },
    {
     "_id": "f46365f5-5319-9fe2-95d3-f2fbe550d65c",
     "correct": true,
     "answer": "`upper` creates a copy of the original string and modifies the copy."
    }
   ],
   "guidance": "Because characters in a string cannot be modified (that includes converting them to uppercase), a copy of the original string is made, and it is the copy that is converted to uppercase.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String immutability"
     }
    ],
    "files": [
     "code/strings/upper-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/upper-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand how methods do not violate the immutability of strings"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-493832508",
  "source": {
   "name": "reading question lower method",
   "showName": false,
   "instructions": "## Reading Question\nHow many parameters does the `lower` method have?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "7b3832a2-b813-4db8-5d14-8e65a90d9384",
     "correct": true,
     "answer": "0"
    },
    {
     "_id": "40252e54-288b-fe99-b9b4-fd39b86daf83",
     "correct": false,
     "answer": "1"
    },
    {
     "_id": "310c3373-14c5-64f8-99c4-304f288979fe",
     "correct": false,
     "answer": "2"
    },
    {
     "_id": "2f84456f-0d50-a7d2-ec4c-fec5f63e3333",
     "correct": false,
     "answer": "3"
    }
   ],
   "guidance": "Parameters are the information between the parentheses. Since there is nothing between the parentheses when the `lower` method is used, there are zero parameters.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Parameters, methods"
     }
    ],
    "files": [
     "code/strings/lower-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/lower-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine the number of parameters for a method"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1257635771",
  "source": {
   "name": "reading question capitalize",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blank below so that the first letter of the string variable `my_string` is uppercase.",
   "text": "```python\nmy_string = \"governments of the Industrial World, you weary giants of flesh and steel, I \\\ncome from Cyberspace, the new home of Mind.\"\nprint(my_string<<<.capitalize()>>>)\n```",
   "guidance": "Since you only want to make the first character uppercase, use the `capitalize` method. Do not forget to put a `.` after the string name and before the method name. Methods also require parentheses with any parameters. `capitalize` does not have any paramenters.\n\n```python\nprint(my_string.capitalize())\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Methods, capitalize method"
     }
    ],
    "files": [
     "code/strings/capitalize-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/capitalize-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT call a string method",
   "tokens": {
    "blank": [
     ".capitalize()"
    ],
    "text": [
     "```python\nmy_string = \"governments of the Industrial World, you weary giants of flesh and steel, I \\\ncome from Cyberspace, the new home of Mind.\"\nprint(my_string",
     0,
     ")\n```"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2695027968",
  "source": {
   "name": "title method reading question",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of the following that are true about the `title` method. **Hint** there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "c5301b59-6bab-27ec-0afa-a193ec3ee95b",
     "correct": true,
     "answer": "The `title` method makes a copy of the original string."
    },
    {
     "_id": "ff4093d2-4cd4-50e8-e22f-33946c730437",
     "correct": false,
     "answer": "The `title` method does not capitalize words like \"of\", \"the\", \"an\", etc."
    },
    {
     "_id": "09733c94-33bb-66ae-dc43-d4f8b70a32db",
     "correct": true,
     "answer": "The first letter of each word in a string is capitalized."
    },
    {
     "_id": "704b337c-855e-3760-1825-a79af1f72a28",
     "correct": true,
     "answer": "If the `title` method makes a letter uppercase, it will also make all of the other characters in the word lowercase."
    }
   ],
   "guidance": "The `title` method will do all of the following things:\n* Make a copy of the original string\n* Capitalize the first character of each word\n* Will make all characters after the first character lowercase",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Title method, string methods"
     }
    ],
    "files": [
     "code/strings/title-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/title-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify what the title method does"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1792875991",
  "source": {
   "name": "reading question starts with method",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below.",
   "text": "The `startswith` method has up to <<<3>>> parameters.\nThe first parameter is <<<required>>>.\nThe other two parameters are <<<optional>>>.\n\n ",
   "guidance": "The `startswith` method has up to 3 parameters.\nThe first parameter is required.\nThe other two parameters are optional.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "startswith method, parameters"
     }
    ],
    "files": [
     "code/strings/startswith-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/startswith-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT distinguish between required and optional parameters",
   "tokens": {
    "blank": [
     "3",
     "required",
     "optional"
    ],
    "text": [
     "The `startswith` method has up to ",
     0,
     " parameters.\nThe first parameter is ",
     0,
     ".\nThe other two parameters are ",
     0,
     ".\n\n "
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1923077265",
  "source": {
   "name": "reading question replace method",
   "showName": false,
   "instructions": "## Reading Question\nComplete the code below so that all instances of `\"house\"` in the string `my_string` are replaced with `\"mouse\"`.",
   "text": "my_string<<<.replace>>>(<<<\"house\">>>, <<<\"mouse\">>>) ",
   "guidance": "Use the `replace` method. The first parameter is the substring to search for, and the second parameter is what will be used in its place.\n\n```python\nmy_string.replace(\"house\", \"mouse\")\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Replace method"
     }
    ],
    "files": [
     "code/strings/replace-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/replace-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT demonstrate how to use the replace method",
   "tokens": {
    "blank": [
     ".replace",
     "\"house\"",
     "\"mouse\""
    ],
    "text": [
     "my_string",
     0,
     "(",
     0,
     ", ",
     0,
     ") "
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-4291022967",
  "source": {
   "name": "reading question find method",
   "showName": false,
   "instructions": "## Reading Question\nAssume that you have two strings, `original_string` and `search_term`. Rearrange the code blocks below to test if `search_term` is found in `original_string`. If true, print the message `\"I found it!\"`. **Hint**, not all of the code blocks will be used.",
   "initial": "if original_string.find(search_term) != -1:\n    print(\"I found it!\")\nif search_term.find(original_string) != -1: #distractor\nif original_string.find(search_term) == -1: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Here are the steps to constructing the correct conditional statement:\n1) Start with a conditional\n```python\nif\n```\n2) Add the string that is being searched\n```python\nif original_string\n```\n3) Attach the `find` method\n```python\nif original_string.find()\n```\n4) Use `search_term` as the parameter for `find`\n```python\nif original_string.find(search_term)\n```\n5) If `search_term` is not found, it will return `-1`. So any number that is not `-1` means that `search_term` has been found\n```python\nif original_string.find(search_term) != -1:\n```\n6) Finally, add the `print` statement\n```python\nif original_string.find(search_term) != -1:\n    print(\"I found it!\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Find method, conditional"
     }
    ],
    "files": [
     "code/strings/find-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/find-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT use the find method in a conditional"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3945179489",
  "source": {
   "name": "reading question in operator",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of the statements that are true about the `in` operator and strings. **Hint**, there are more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "54b3d31e-22c9-548c-4a33-2ee4948b11eb",
     "correct": true,
     "answer": "`in` returns a boolean value"
    },
    {
     "_id": "a4bc5308-c1a8-5b20-ee29-9087ffb800b5",
     "correct": false,
     "answer": "`in` returns an index when a word is present in a string"
    },
    {
     "_id": "f94f58fc-500d-fb78-f284-0928902f3d12",
     "correct": true,
     "answer": "`in` will return `False` if a word is found in a string but one is lowercase and the other is uppercase"
    },
    {
     "_id": "48fbaa1e-e27c-e652-7973-9769e4342273",
     "correct": false,
     "answer": "`in` will return `True` if a word is found in a string even if one is lowercase and the other is uppercase"
    }
   ],
   "guidance": "The `in` operator will return a boolean value (`True` or `False`). The `in` operator is also case sensitive. That means the characters and case must match. If one is uppercase and the other is lowercase, `in` will return `False`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "String"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "In operator"
     }
    ],
    "files": [
     "code/strings/string-in.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-in.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT summarize how the in operator works with strings"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-888736800",
  "source": {
   "name": "formative assessment 1 string basics",
   "showName": false,
   "instructions": "## String Basics\nRearrange the code blocks below to create a program that checks if `string1` is longer than `string2`. Then print the message `String1 is longer` if true. **Hint**, not all of the code blocks will be used.",
   "initial": "if len(string1) > len(string2):\n    print(\"String1 is longer\")\nif string1.len() > string2.len(): #distractor\nif length(string1) > length(string2): #distractor\n",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "The Python command for the length of a string is `len()`. So the correct answer would be:\n\n```python\nif len(string1) > len(string2):\n    print(\"String1 is longer\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "len function"
     }
    ],
    "files": [
     "code/strings/string-in.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-in.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT implement the len function"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-404036681",
  "source": {
   "name": "formative assessment 2 string basics",
   "showName": false,
   "instructions": "## String Basics\nSelect all of the print statements below that will produce the following output:\n\n```python\nI am the first line,\nI am the second,\nand I am the third line!\n```\n\n**Hint**, there are more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "16ac568a-48c5-9688-2a12-bac07e86da2c",
     "correct": true,
     "answer": "print(\"I am the first line,\\nI am the second,\\nand I am the third line!\")"
    },
    {
     "_id": "684dd722-5997-2892-8782-b2247e0d7fe6",
     "correct": false,
     "answer": "print(\"I am the first line,\nI am the second,\nand I am the third line!\")"
    },
    {
     "_id": "5f272bfb-fb85-fd8a-6b21-6df586381f53",
     "correct": true,
     "answer": "print(\"\"\"I am the first line,\nI am the second,\nand I am the third line!\"\"\")"
    },
    {
     "_id": "daae4d4d-ed71-1c13-4e01-573e7d66fdd7",
     "correct": false,
     "answer": "print(\"I am the first line, \\\\\nI am the second, \\\\\nand I am the third line!\")"
    }
   ],
   "guidance": "**Option 1**\nThis is a correct answer because `\\n` is the escape character for a newline.\n\n**Option 2**\nThis is **not** a correct answer because a `print` statement with one quotation mark must be on one line of code.\n\n**Option 3**\nThis is a correct answer because using triple quotation marks (`\"\"\"`) will preserve whitespace and line breaks.\n\n**Option 4**\nThis is **not** a correct answer because this will print everything on one line. Using the `\\` character allows you to have your `print` statement on several different lines, but the output will be on one line.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Newline character, multiline strings"
     }
    ],
    "files": [
     "code/strings/string-in.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT recognize different ways to print output on several different lines"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3742978635",
  "source": {
   "name": "formative assessment 1 string methods",
   "showName": false,
   "instructions": "## String Methods\nLook at the before and after code samples below:\n* **Before:** `the brown dog jumps over the lazy fox`\n* **After:** `THE BROWN CAT JUMPS OVER THE LAZY FOX`\nWhat two string methods would you use to change the text?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "c818582d-acc2-f323-4ade-195b6f30318e",
     "correct": false,
     "answer": "Swap and upper"
    },
    {
     "_id": "dd5730c3-fc8c-8214-f97d-152a60fe5206",
     "correct": true,
     "answer": "Replace and upper"
    },
    {
     "_id": "45202c15-df4f-f534-ae3f-78f2e0a3edc9",
     "correct": false,
     "answer": "Replace and capitalize"
    },
    {
     "_id": "d18e55c3-ddf8-03b6-6259-ac28771221ab",
     "correct": false,
     "answer": "Exchange and title"
    }
   ],
   "guidance": "You would use the `replace` method to change `dog` to `cat`, and the `upper` method to make all of the characters uppercase. There is not a string method named `replace`, `swap`, or `exchange`. The `capitalize` method only makes the first letter of the string upper case. The `title` method makes the first character of each word uppercase.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String methods"
     }
    ],
    "files": [
     "code/strings/string-in.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-in.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT recognize which string methods are needed to produce a given output"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2300466956",
  "source": {
   "name": "formative assessment 2 string methods",
   "showName": false,
   "instructions": "## String Methods\nImagine you have a string variable `sentence`. Rearrange the code blocks below to create a program that checks if `sentence` starts with blank spaces. If yes, print `sentence` without the blank spaces.",
   "initial": "if sentence.startswith(\" \"):\n    print(sentence.strip(\" \"))\nif sentence.beginswith(\" \"): #distractor\nif sentence.startswith(): #distractor\nprint(sentence.strip()) #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "For the if statement, the method that checks the beginning of a string is `startswith`. The parameter for the method is `\" \"`. For the `print` statement, the method to use is `strip`, and it takes `\" \"` as a parameter. The final answer is:\n\n```python\nif sentence.startswith(\" \"):\n    print(sentence.strip(\" \"))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String methods"
     }
    ],
    "files": [
     "code/strings/string-in.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT combines the startswith and strip methods"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1321912568",
  "source": {
   "name": "reading question string functions",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of the components that make up the syntax of a string function. **Hint**, there are more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "18b5c68c-edcb-79f3-e1b0-d796c8dfb73d",
     "correct": false,
     "answer": "A `.`"
    },
    {
     "_id": "c447fb34-bdb2-4392-93cd-f17e73fb400a",
     "correct": true,
     "answer": "Function name"
    },
    {
     "_id": "5ca6bfa2-e1b5-e7b0-aa43-3e84989e4b71",
     "correct": true,
     "answer": "String parameter"
    },
    {
     "_id": "75074a28-b39e-be1b-8357-19326fe5f730",
     "correct": true,
     "answer": "Parentheses"
    }
   ],
   "guidance": "The three parts of string function syntax are:\n1) The function name\n2) Parentheses\n3) A string parameter between the parentheses",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String functions"
     }
    ],
    "files": [
     "code/strings/min-function.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/min-function.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the syntax of a string function"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-409296030",
  "source": {
   "name": "reading question max string function",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below to find the \"largest\" value in the string `my_string`.",
   "text": "<<<max>>>(<<<my_string>>>)",
   "guidance": "The function name comes first, followed by parentheses, and the string parameter between the parentheses.\n\n```python\nmax(my_string)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String functions"
     }
    ],
    "files": [
     "code/strings/max-function.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/max-function.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT properly write a string function",
   "tokens": {
    "blank": [
     "max",
     "my_string"
    ],
    "text": [
     0,
     "(",
     0,
     ")"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3301082957",
  "source": {
   "name": "formative assessment 1 string functions",
   "showName": false,
   "instructions": "## String Functions\nRearrange the code blocks below so that your program prints the smallest value from the string `my_string`. **Hint**, you will not use all of the code blocks.",
   "initial": "my_string = \"av67!#\"\nsmallest = min(my_string)\nprint(smallest)\nprint(min) #distractor\nsmallest = my_string.min() #distractor\nsmallest = minimum(my_string) #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Here are the steps to solving this problem:\n1) Declare the variable `my_string`\n2) Declare the variable `smallest` and set its value to `min(my_string)`. The function `minimum` does not exist, and `min.my_string()` is not the proper syntax for a string function.\n3) Print `smallest`",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String functions"
     }
    ],
    "files": [
     "code/strings/max-function.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT make use of the min string function"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2621745761",
  "source": {
   "name": "formative assessment 2 string functions",
   "showName": false,
   "instructions": "## String Functions\nAssume you have two strings, `string1` and `string2`. Rearrange the blocks below so that your program compares the \"biggest\" characters from each string and print either `string1 has the biggest character` or `string2 has the biggest character`. **Hint**, you will not use all of the code blocks.",
   "initial": "if max(string1) > max(string2):\n    print(\"string1 has the biggest character\")\nelse:\n    print(\"string2 has the biggest character\")\nif max.string1 > max.string2: #distractor\nif max(string1) > min(string2): #distractor\nif min(string1) > max(string2): #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "The correct conditional is the one that compares the maximum values for `string1` and `string2`. The code blocks that use `min` can be ignored. The proper syntax for a string function is the name of the function, parentheses, and a string parameter between the parentheses. So `max.string1` can be ignored. The correct answer is:\n\n```python\nif max(string1) > max(string2):\n    print(\"string1 has the biggest character\")\nelse:\n    print(\"string2 has the biggest character\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String functions"
     }
    ],
    "files": [
     "code/strings/max-function.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/max-function.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT demonstrate ability to find maximum value of a string"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1938628481",
  "source": {
   "name": "reading question string iteration for loops",
   "showName": false,
   "instructions": "## Reading Question\nAssume you have a string variable called `my_string`. Fill in the blanks below so that the program prints each character of `my_string`.",
   "text": "```python\nfor <<<char>>> in <<<my_string>>>:\n    print(char)\n```",
   "guidance": "The first blank is the variable `char`. We know this because `char` appears in the `print` statement. The second blank is the string variable, which was given as `my_string`.\n\n```python\nfor char in my_string:\n    print(char)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String iteration"
     }
    ],
    "files": [
     "code/strings/string-for-loop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-for-loop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT construct a for loop that iterates over a string",
   "tokens": {
    "blank": [
     "char",
     "my_string"
    ],
    "text": [
     "```python\nfor ",
     0,
     " in ",
     0,
     ":\n    print(char)\n```"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-172748421",
  "source": {
   "name": "reading question while loop string iteration",
   "showName": false,
   "instructions": "## Reading Question\nAssume you have a string variable called `my_string`. Fill in the blanks below so that the program uses a while loop to iterate over `my_string` and print each character.",
   "text": "```python\nlength = len(<<<my_string>>>)\ni = 0\n\nwhile i < length:\n    print(<<<my_string[i]>>>)\n    i += 1\n```",
   "guidance": "The first blank is `my_string`. When using a while loop, you need to know how long the string is. So `length` should be equal to the length of `my_string`. The second blank is `my_string[i]`. Referencing a character with a while loop means using the string name and an index. The variable `i` represents the index.\n\n```python\nlength = len(<<<my_string>>>)\ni = 0\n\nwhile i < length:\n    print(<<<my_string[i]>>>)\n    i += 1\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String iteration"
     }
    ],
    "files": [
     "code/strings/string-while-loop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-while-loop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT iterate on a string with a while loop",
   "tokens": {
    "blank": [
     "my_string",
     "my_string[i]"
    ],
    "text": [
     "```python\nlength = len(",
     0,
     ")\ni = 0\n\nwhile i < length:\n    print(",
     0,
     ")\n    i += 1\n```"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-661502728",
  "source": {
   "name": "formative assessment string iteration while loop",
   "showName": false,
   "instructions": "## String Iteration\nSelect all of the variables do you need to declare to iterate over a string with a while loop. **Hint**, there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "e2e2febc-d03d-7672-b117-683505f51e62",
     "correct": false,
     "answer": "You do not need any additional variables when iterating over a string with a while loop "
    },
    {
     "_id": "dae2a2ae-f965-f822-93a0-7b1375af98ff",
     "correct": true,
     "answer": "A variable to represent the length of the string"
    },
    {
     "_id": "c58335a6-11ee-31d7-53c1-8d8e98d7d87a",
     "correct": true,
     "answer": "A variable to represent the index"
    },
    {
     "_id": "6b66a5a5-d714-6911-ba31-2a34caad0cca",
     "correct": false,
     "answer": "A variable to represent the datatype of the string variable"
    }
   ],
   "guidance": "Using a while loop to iterate over a string requires a variable to represent the length of the string and another to represent the index.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String iteration"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify differences in using a while loop to iterate over a string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3146014256",
  "source": {
   "name": "formative assessment for loop string iteration",
   "showName": false,
   "instructions": "## String Iteration\nUse the code below to help you answer the following question:\n\n```python\nmy_string = \"Hello world\"\nfor char in my_string:\n    print(char)\n```\n\nWhat does the variable `char` represent?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a0858321-e490-a995-14de-67b83e49e37b",
     "correct": false,
     "answer": "`char` represents the length of `my_string`"
    },
    {
     "_id": "3c76a3cf-1bd7-01a0-43ea-f9e602b139c9",
     "correct": false,
     "answer": "`char` represents a copy of `my_string`"
    },
    {
     "_id": "f705140a-8a1b-0373-b12b-a165dd8ee4b7",
     "correct": false,
     "answer": "`char` represents the datatype of `my_string`"
    },
    {
     "_id": "de25c800-8c4f-f93b-4ef9-0330abbbc4c9",
     "correct": true,
     "answer": "`char` represents each character in `my_string`"
    }
   ],
   "guidance": "The `char` variable represents each character in `my_string`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String iteration"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify the purpose of the variable in a for loop when iterating over a string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2369717682",
  "source": {
   "name": "reading question string slicing",
   "showName": false,
   "instructions": "## Reading Question\nUse the code below to help you answer the following question:\n\n```python\nmy_string = \"Calvin and Hobbes\"\nmy_slice = my_string[3:8]\n```\n\nWhat is the value of `my_slice`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "2df3f580-5283-ea71-3d93-bad686d08968",
     "correct": false,
     "answer": "\"vin an\""
    },
    {
     "_id": "07e75719-61cd-59c9-022a-9e1b51f33849",
     "correct": true,
     "answer": "\"vin a\""
    },
    {
     "_id": "18b6b639-6725-4b0c-d403-acc301cad695",
     "correct": false,
     "answer": "\"lvin \""
    },
    {
     "_id": "98b610dd-6930-807a-c31d-c88c7b10f636",
     "correct": false,
     "answer": "\"lvin a\""
    }
   ],
   "guidance": "The slice operator has start and stop values. The start value is inclusive, meaning this value is a part of the slice. The stop value is exclusive, meaning that this value is not a part of the slice. Since the slice is `[3:8]`, the answer will be the characters from indexes 3 to 7, which is `\"vin a\"`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String slice"
     }
    ],
    "files": [
     "code/strings/string-slice.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-slice.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify the result of slicing a string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4155035086",
  "source": {
   "name": "reading question string interpolation",
   "showName": false,
   "instructions": "## Reading Question\nWhat does the term string interpolation mean?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "dab51c84-7842-ea4f-84b3-e803a59afd74",
     "correct": false,
     "answer": "Converting a variable to the type string"
    },
    {
     "_id": "e87cc517-6289-fa7b-71aa-bfe9aa58c9e3",
     "correct": true,
     "answer": "Inserting the value of variables into a string"
    },
    {
     "_id": "30cbe136-1174-522b-9c04-461ad83e32bb",
     "correct": false,
     "answer": "Printing a string"
    },
    {
     "_id": "71fb8ac6-2f3a-10ac-78ff-2508355956b1",
     "correct": false,
     "answer": "Assigning a string value to a variable"
    }
   ],
   "guidance": "String interpolation is the act of inserting the value of a variable into a string.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String interpolation"
     }
    ],
    "files": [
     "code/strings/string-interpolation.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-interpolation.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define string interpolation"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1276437047",
  "source": {
   "name": "reading question string interpolation format",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below to incorporate the variables `var1` and `var2` into the string `my_string` so that it reads \"The cat in the hat.\"",
   "text": "var1 = 'hat'\nvar2 = 'cat'\nmy_string = \"The {} in the {}.\".format(<<<var2>>>, <<<var1>>>)",
   "guidance": "Since there are no indexes in the `{}`, the order of the variables is important. The final string should have \"cat\" before \"hat\", so `var2` needs to come before `var1`.\n\n```python\nvar1 = 'hat'\nvar2 = 'cat'\nmy_string = \"The {} in the {}.\".format(var2, var1)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String interpolation"
     }
    ],
    "files": [
     "code/strings/format-string-interpolation.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/format-string-interpolation.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT recognize the importance of order for string interpolation with format",
   "tokens": {
    "blank": [
     "var2",
     "var1"
    ],
    "text": [
     "var1 = 'hat'\nvar2 = 'cat'\nmy_string = \"The {} in the {}.\".format(",
     0,
     ", ",
     0,
     ")"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2634811268",
  "source": {
   "name": "reading question f-strings",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below to create a program that prints, `Calvin and Hobbes`.",
   "text": "var1 = \"Hobbes\"\nvar2 = \"Calvin\"\nphrase = <<<f>>>\"<<<{var2}>>> and <<<{var1}>>>\"\nprint(phrase)",
   "guidance": "The first blank should be an `f` since you want to create an f-string. Since `Calvin` comes before `Hobbes`, use `{var2}` and then `{var1}`.\n\n```python\nvar1 = \"Hobbes\"\nvar2 = \"Calvin\"\nphrase = f\"{var2} and {var1}\"\nprint(phrase)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String interpolation, f-strings"
     }
    ],
    "files": [
     "code/strings/f-strings.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/f-strings.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT demonstrate to to use an f-string for string interpolation",
   "tokens": {
    "blank": [
     "f",
     "{var2}",
     "{var1}"
    ],
    "text": [
     "var1 = \"Hobbes\"\nvar2 = \"Calvin\"\nphrase = ",
     0,
     "\"",
     0,
     " and ",
     0,
     "\"\nprint(phrase)"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3263461860",
  "source": {
   "name": "reading question string interpolation %",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below so that the code will print, `Roses are red, violets are blue.`",
   "text": "var1 = \"blue\"\nvar2 = \"Roses\"\nvar3 = \"red\"\nphrase = \"<<<%s>>> are <<<%s>>>, violets are <<<%s>>>.\" % (<<<var2>>>, <<<var3>>>, <<<var1>>>)\nprint(phrase)",
   "guidance": "The first three blanks are all `%s` because all of the variables are strings. Since \"Roses\" comes first, the first variable is `var2`. The next word should be \"red\", so variable `var3` is next. `var1` is the final variable.\n\n```python\nvar1 = \"blue\"\nvar2 = \"Roses\"\nvar3 = \"red\"\nphrase = \"%s are %s, violets are %s.\" % (var2, var3, var1)\nprint(phrase)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String interpolation, %"
     }
    ],
    "files": [
     "code/strings/old-string-interpolation.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/old-string-interpolation.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT perform string interpolation with %",
   "tokens": {
    "blank": [
     "%s",
     "%s",
     "%s",
     "var2",
     "var3",
     "var1"
    ],
    "text": [
     "var1 = \"blue\"\nvar2 = \"Roses\"\nvar3 = \"red\"\nphrase = \"",
     0,
     " are ",
     0,
     ", violets are ",
     0,
     ".\" % (",
     0,
     ", ",
     0,
     ", ",
     0,
     ")\nprint(phrase)"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2951295692",
  "source": {
   "name": "Formative Assessment String Interpolation",
   "showName": false,
   "instructions": "## String Interpolation\nUse the code below to help you answer the following question. The program should print the phrase:\n\n**May it be more humane and fair than the world your governments have made before.**\n\n```python\nvar1 = \"governments\"\nvar2 = \"fair\"\nvar3 = \"humane\"\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "9ec77a74-f9d5-bfb9-8522-6355b35c5992",
     "correct": true,
     "answer": "print(\"May it be more {} and {} than the world your {} have made before.\".format(var3, var2, var1))"
    },
    {
     "_id": "c157568b-f9a6-daf7-4bd5-350484cf1d79",
     "correct": false,
     "answer": "print(\"May it be more {2} and {1} than the world your {0} have made before.\".format(var3, var2, var1))"
    },
    {
     "_id": "c991b8b3-b021-e324-ab31-2df976c34b1d",
     "correct": false,
     "answer": "print(\"May it be more {var3} and {var1} than the world your {var2} have made before.\")"
    },
    {
     "_id": "8e78578f-3f50-edb3-183e-b6c7e6ce3a97",
     "correct": false,
     "answer": "print(\"May it be more {} and {} than the world your {} have made before.\".format(var1, var2, var3))"
    }
   ],
   "guidance": "The correct order for the words is \"humane\", \"fair\", and \"governments\". That would be `var3`, `var2`, `var1`. Here are the four options:\n\n1) This is the correct answer. The `format` method has the variables in the proper order.\n\n2) This is incorrect. The variables are in the correct order for the `format` method. However, `{}` have numbers inside which are the indexes of the variables. The order of the variables would be `var1`, `var2`, `var3`.\n\n3) This is incorrect. In addition to the variables being in the wrong order, there is no `f` for the f-string.\n\n4) This is incorrect. The syntax is correct, but the variables are in the wrong order.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Pyton"
     },
     {
      "name": "Category",
      "value": "String interpolation"
     }
    ],
    "files": [
     "code/strings/old-string-interpolation.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT compare the syntax of the various methods of string interpolation"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3596902440",
  "source": {
   "name": "formative assessment 2 string interpolation",
   "showName": false,
   "instructions": "## String Interpolation\nWhich of the following are recommended ways you should perform string interpolation in **Python 3**? **Hint**, there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "144fe549-943e-9fb4-b4de-902f25270a1f",
     "correct": true,
     "answer": "Using `+` or commas"
    },
    {
     "_id": "6a4ccf91-e0b7-bb6d-05a6-d668135ccdb9",
     "correct": false,
     "answer": "Using `%`"
    },
    {
     "_id": "fa94dc1c-a822-9996-14fe-61a2f532111c",
     "correct": true,
     "answer": "Using the `format` method"
    },
    {
     "_id": "af715cf8-6ee9-965d-75be-df8ff330b4b6",
     "correct": true,
     "answer": "Using f-strings"
    }
   ],
   "guidance": "You should not be using the `%` operator for string interpolation. Python has adopted other ways to integrate variables in a string.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "String"
     },
     {
      "name": "Programming Language",
      "value": "Pyt"
     },
     {
      "name": "Category",
      "value": "String interpolation"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize that % should not be used for string interpolation"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1789216035",
  "source": {
   "name": "reading question string comparison == and !=",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blank below so that the program will print `True`.",
   "text": "string1 = \"I love Python\"\nstring2 = \"I love Pyth0n\"\nprint(string1 <<<!=>>> string2)",
   "guidance": "The two strings are not equal; `string2` has a `0` instead of a `o` for the word `Python`. To print `True` then test to see if the two strings are not equal.\n\n```python\nstring1 = \"I love Python\"\nstring2 = \"I love Pyth0n\"\nprint(string1 != string2)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String comparison"
     }
    ],
    "files": [
     "code/strings/boolean-comparison.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/boolean-comparison.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine which equality test (== or !=) to use",
   "tokens": {
    "blank": [
     "!="
    ],
    "text": [
     "string1 = \"I love Python\"\nstring2 = \"I love Pyth0n\"\nprint(string1 ",
     0,
     " string2)"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-124411320",
  "source": {
   "name": "reading question string comparison is & is not",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below.",
   "text": "The `is` keyword can be used to replace <<<==>>> for string comparisons.\nThe `is not` keywords can be used to replace <<<!=>>> for string comparisons.",
   "guidance": "The `is` keyword can be used to replace == for string comparisons.\nThe `is not` keywords can be used to replace != for string comparisons.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String comparison"
     }
    ],
    "files": [
     "code/strings/is-comparison.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/is-comparison.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize which boolean expressions is and is not replace",
   "tokens": {
    "blank": [
     "==",
     "!="
    ],
    "text": [
     "The `is` keyword can be used to replace ",
     0,
     " for string comparisons.\nThe `is not` keywords can be used to replace ",
     0,
     " for string comparisons."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3362327903",
  "source": {
   "name": "reading question is versus ==",
   "showName": false,
   "instructions": "## Reading Question\nWhat is the difference between using `is` and `==` for comparison?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "f041a35d-a997-e2ac-d10f-f3d57797fd0f",
     "correct": false,
     "answer": "Nothing, they both work the same way."
    },
    {
     "_id": "291e7e39-8275-f3d7-b952-5dc386a844b9",
     "correct": true,
     "answer": "The `is` keyword compares object IDs, while `==` compares values."
    },
    {
     "_id": "5f078dcf-e432-3e1f-5b5d-3f678cdec595",
     "correct": false,
     "answer": "The `==` operator does not work on strings, while `is` only works with strings."
    },
    {
     "_id": "5943539e-fc8c-fc1a-692e-2c9f637e8d37",
     "correct": false,
     "answer": "The `is` keyword compares values while `==` compares object IDs."
    }
   ],
   "guidance": "The `is` keyword compares object IDs, while `==` compares value.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/strings/why-is.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/why-is.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the difference between is and =="
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3617041259",
  "source": {
   "name": "reading question string comparison capitalization",
   "showName": false,
   "instructions": "## Reading Question\nWhy is converting strings to lowercase a helpful way to compare strings?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "64a8b8a5-2155-193d-5306-71d8f5b1a360",
     "correct": false,
     "answer": "You don't need to do this. Python doesn't care about capitalization."
    },
    {
     "_id": "c1f38a0b-fa50-794b-d376-6b2f9f41e707",
     "correct": false,
     "answer": "Comparing lowercase strings is faster than comparing uppercase strings."
    },
    {
     "_id": "1e464312-6f80-b699-8685-ae919f2d053c",
     "correct": true,
     "answer": "Python is case sensitive. Making strings all one case will compare the characters of a string and not capitalization."
    },
    {
     "_id": "c303c1c8-d37b-ea77-e87f-f7d1c85caa09",
     "correct": false,
     "answer": "Python cannot compare strings unless they are lowercase. Comparing uppercase strings will cause an error."
    }
   ],
   "guidance": "Python is case sensitive. Making strings all one case will compare the characters of a string and not capitalization.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Pyt"
     },
     {
      "name": "Category",
      "value": "String comparison"
     }
    ],
    "files": [
     "code/strings/capitalization-comparison.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/capitalization-comparison.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT compare text regardless of capitalization"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4043915169",
  "source": {
   "name": "reading question alphabetical order strings",
   "showName": false,
   "instructions": "## Reading Question\nAssume that you have two string variables `string1` and `string2`. Fill in the blanks below.",
   "text": "Check to see if `string1` comes before `string2`:\n```python\nstring1 <<<<>>> string2\n```\n\nCheck to see if `string2` comes after `string1`:\n```python\nstring1 <<<>>>> string2\n```",
   "guidance": "If `string1` comes before `string2`, then `string1` is **less than** `string2`. If `string2` comes after `string1`, then `string2` is **greater than** `string1`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String comparison"
     }
    ],
    "files": [
     "code/strings/alpha-order.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/alpha-order.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT compare two strings for alphabetical order",
   "tokens": {
    "blank": [
     "<",
     ">"
    ],
    "text": [
     "Check to see if `string1` comes before `string2`:\n```python\nstring1 ",
     0,
     " string2\n```\n\nCheck to see if `string2` comes after `string1`:\n```python\nstring1 ",
     0,
     " string2\n```"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1750024337",
  "source": {
   "name": "Python - Number Checker",
   "showName": true,
   "instructions": "Construct a program that will output `Confirmed, number is greater than 10` if a given variable `x` is greater than 10. If otherwise, output `Confirmed, number is NOT greater than 10`.\n\nClick on the boxes to toggle through the different options.",
   "initial": "$$toggle::if::else$$ $$toggle::x::>::<::10::<=::>==$$ $$toggle::x::>::<::10::<=::>==$$ $$toggle::x::>::<::10::<=::>==$$:\n    $$toggle::print(\"Confirmed, number is greater than 10\")::print(\"Confirmed, number is NOT greater than 10\")$$\n\n$$toggle::if::else$$:\n    $$toggle::print(\"Confirmed, number is greater than 10\")::print(\"Confirmed, number is NOT greater than 10\")$$",
   "options": "{\n                \"sortableId\": \"sortable\",\n                \"max_wrong_lines\": 1,\n                \"vartests\": [{\"initcode\": \"x = 11\", \"output\": \"\", \"message\": \"Testing...\", \"variables\": {\"output\": \"Confirmed, number is greater than 10\\n\"}},\n                             {\"initcode\": \"x = 9\", \"output\": \"\", \"message\": \"Testing\", \"variables\": {\"output\": \"Confirmed, number is NOT greater than 10\\n\"}}],\n                \"programmingLang\": \"python\"\n            }",
   "grader": "4",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Category",
      "value": "Number Checker"
     },
     {
      "name": "Content",
      "value": "program construction"
     },
     {
      "name": "Programming Language",
      "value": "python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT construct a program that will output x is greater than 10."
  },
  "linkedId": "0088cdf9-ec2c-4847-8506-9ae5fca49168",
  "libraryId": "7f9c49e5-5dbb-48ea-8006-6944447abbe6",
  "version": 0
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2169531553",
  "source": {
   "name": "Check String Equality",
   "showName": false,
   "instructions": "## String Comparison\nRearrange the code below to write a program that checks to see if two strings (`string1` and `string2`) are equal. If yes, print the message `The two strings are equal.`. If not, print the message `The two strings are not equal.` **Hint**, you will not use all of the code blocks.",
   "initial": "if string1 is string2:\n    print(\"The two strings are equal.\")\nelse:\n    print(\"The two strings are not equal.\")\nif string1 is = string2: #distractor\nif string1 == string1: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "The two ways to compare a string for equality are with `is` and `==`. The only code block that used one of those operators and the variables `string1` and `string2` is `string1 is string2`.\n\n```python\nif string1 is string2:\n    print(\"The two strings are equal.\")\nelse:\n    print(\"The two strings are not equal.\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String comparison"
     }
    ],
    "files": [
     "code/strings/alpha-order.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/alpha-order.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT compare two strings for equality"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2925768874",
  "source": {
   "name": "Comparing Is and == for String Comparison",
   "showName": false,
   "instructions": "## String Comparison\nSelect all of the true statements about `is` and `==` regarding string comparison. **Hint**, there will be more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "eb7ce17e-0d12-b948-f7ae-b843765444c6",
     "correct": true,
     "answer": "Both `is` and `==` can be used to check string equality."
    },
    {
     "_id": "a56ed4ba-d4d6-98ad-09c2-44ef353aaed2",
     "correct": true,
     "answer": "`is` compares object IDs."
    },
    {
     "_id": "576ec1df-3322-f4b4-66b2-7fa8cb28e1f6",
     "correct": true,
     "answer": "`==` compares values."
    },
    {
     "_id": "385844e8-f6d9-dd2a-4129-72e4b0d59b05",
     "correct": true,
     "answer": "`is` is the preferred way to compare strings and other objects."
    }
   ],
   "guidance": "All of the statements are true. Both operators can check string equality. `is` compares object IDs while `==` compares values. Finally, `is` is the preferred way to compare strings and other objects in Python.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String comparison"
     }
    ],
    "files": [
     "code/strings/alpha-order.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/alpha-order.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine the characteristics of is and == when comparing strings"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1188258348",
  "source": {
   "name": "String Iteration with a For Loop",
   "showName": false,
   "instructions": "## Lab Question\nUsing the code below, what does the variable `char` represent? Assume that `my_string` is a string variable.\n\n```python\nfor char in my_string:\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "9351b53c-ba29-59ce-c796-036c26a3479f",
     "correct": false,
     "answer": "The variable `char` represents the string `my_string`."
    },
    {
     "_id": "b27ff65a-183a-a45c-368c-2aa815f2cfa4",
     "correct": false,
     "answer": "The variable `char` represents the index of each character in `my_string`."
    },
    {
     "_id": "2df998fe-3b61-a9b9-0085-6810c6b319e9",
     "correct": false,
     "answer": "The variable `char` represents the length of the string `my_string`."
    },
    {
     "_id": "3f4423f4-00b2-721b-a658-a52b1f354548",
     "correct": true,
     "answer": "The variable `char` represents each character in the string `my_string`."
    }
   ],
   "guidance": "In the for loop, Python will not go past the length of `my_string`, and Python will use an index to determine the value of `char`. However, the variable `char` represents each character in the string `my_string`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String iteration"
     }
    ],
    "files": [
     "code/strings/lab1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/lab1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT determine the purpose of the for loop variable when iterating over a string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1456526025",
  "source": {
   "name": "String Immutability",
   "showName": false,
   "instructions": "## Lab Question\nWhat does \"string immutability\" mean?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "4da39982-80f1-7ac4-14b5-c0a61be35a73",
     "correct": true,
     "answer": "You cannot change the contents of a string once you have created it. You can, however, overwrite a string variable with a new value."
    },
    {
     "_id": "383382b9-b9c0-8cf3-3558-faf0de235e33",
     "correct": false,
     "answer": "String variables can never, ever change once they have been created."
    },
    {
     "_id": "ca919cc6-bdb8-b3ea-9173-61a2984e04c3",
     "correct": false,
     "answer": "You can alter the first character of a string and leave the rest of the string intact."
    },
    {
     "_id": "bdcbe622-11d8-d89e-ccf9-35c117af3d1f",
     "correct": false,
     "answer": "You can modify a string any way you want."
    }
   ],
   "guidance": "You cannot change the contents of a string once you have created it. You can, however, overwrite a string variable with a new value.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String immutability"
     }
    ],
    "files": [
     "code/strings/lab2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/lab2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define string immutability"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2677998262",
  "source": {
   "name": "string interpolation format method",
   "showName": false,
   "instructions": "## Lab Question\nWhat does the `format` method do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "2538b9e9-3480-1081-81b9-c18c7c0f5801",
     "correct": false,
     "answer": "The `format` method converts the appropriate characters to uppercase."
    },
    {
     "_id": "d0bd4096-50bc-a55e-a60d-f9843215e288",
     "correct": false,
     "answer": "The `format` method right-justifies the string."
    },
    {
     "_id": "8078f30a-3951-8222-ccad-2f7c9fcbf835",
     "correct": true,
     "answer": "The `format` method is a form of string interpolation. It takes the variables in the parentheses and puts them in place of the `{}`."
    },
    {
     "_id": "43403725-2451-7d88-5b10-554c93db5292",
     "correct": false,
     "answer": "The `format` method makes the text nice and neat when printing it to the screen."
    }
   ],
   "guidance": "The `format` method is a form of string interpolation. It takes the variables in the parentheses and puts them in place of the `{}`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String interpolation"
     }
    ],
    "files": [
     "code/strings/lab3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/lab3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify what the format method does to a string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-887107274",
  "source": {
   "name": "Changing case for string comparison",
   "showName": false,
   "instructions": "## Lab Question\nWhy is it sometimes beneficial to change the case of a string before a comparison?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "1d0ad90c-4785-8bd8-0077-54a396297c90",
     "correct": false,
     "answer": "You can only compare strings if they are the same case. If not, you get an error message."
    },
    {
     "_id": "5b0cbef6-2e36-259d-afcb-56dd230e1491",
     "correct": false,
     "answer": "String comparison is fast when the strings are all the same case."
    },
    {
     "_id": "9964c49a-8d34-26d2-8cdb-51aa72a86469",
     "correct": false,
     "answer": "It is not beneficial. You can compare strings just fine without making any changes."
    },
    {
     "_id": "e5efaed5-31e6-df85-83d0-fe7d8395e512",
     "correct": true,
     "answer": "Python is case sensitive. Changing the case can reduce false negatives by only comparing strings in the same case."
    }
   ],
   "guidance": "Python is case sensitive. Changing the case can reduce false negatives by only comparing strings in the same case. For example, \"Red\" and \"red\" are the same words to a human. Python says these are not the same because one has a capital letter, while the other is all lowercase. Standardizing on a single case keeps Python from doing this.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String comparison"
     }
    ],
    "files": [
     "code/strings/lab4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/lab4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT describe why standardizing on a single case is beneficial for string comparison"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3924836892",
  "source": {
   "name": "Swap Vowels for *",
   "showName": false,
   "instructions": "Remember, do not declare the variable `my_string` in your code when you submit it. The auto-grader will declare the variable for you.",
   "command": "python3 .guides/secure/lab-test-strings.py",
   "preExecuteCommand": "",
   "guidance": "There are many ways to solve this problem. Here are two possible solutions. One uses string iteration and the other uses the `replace` method.\n\n### String Iteration\nYou will need three variables: one is the original string (`my_string`), another string is all the vowels, and the third string is the modified string. In this method, loop through the `my_string` and ask if each character is in the string `vowel`. If yes, add a `\"*\"` to the variable `modified_string`. If not, add the character to `modified_string`. Finally, after the loop has run, print `modified_string`.\n\n```python\nmy_string = \"Calvin\"\nvowels = \"aeiou\"\nmodified_string = \"\"\n\nfor char in my_string:\n    if char in vowels:\n        modified_string += \"*\"\n    else:\n        modified_string += char\n\nprint(modified_string)\n```\n\n### Replace Method\nAnother way to solve this problem is to use the `replace` method. You will need two variables: `my_string` and `vowels`. Loop through `vowels` and use `replace` on `my_string` with the vowel from the loop. Overwrite `my_string` with the new version of `my_string`.\n\n```python\nmy_string = \"Hobbes\"\nvowels = \"aeiou\"\n\nfor vowel in vowels:\n    my_string = my_string.replace(vowel, \"*\")\n\nprint(my_string)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "Hello",
     "input": "",
     "output": "H*ll*",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "balloon",
     "input": "",
     "output": "b*ll**n",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "aeiou",
     "input": "",
     "output": "*****",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String iteration, string methods"
     }
    ],
    "files": [
     "code/strings/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT replace vowels in a string with an \"*\""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2841054492",
  "source": {
   "name": "coding exercise 1 strings",
   "showName": false,
   "instructions": "**Reminder**, do not put a prompt when collecting user input. Just use `input()`.",
   "command": "python3 code/strings/exercise1.py",
   "preExecuteCommand": "",
   "guidance": "There are many ways to solve this problem. Here is one possible solution. Start by creating a variable `txt` to capture user input with `input()`. Remember, do not use a prompt. Create a variable called `first` and set its value to `txt[0]`. Index 0 is always the first character. Create another variable called `last` and set its value to `txt[-1]`. -1 is the index that always refers to the last character. Print these two variables with the appropriate text and the `format` method.\n\n```python\ntxt = input()\nfirst = txt[0]\nlast = txt[-1]\nprint(\"{} is the first character and {} is the last character\".format(first, last))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "balloon",
     "output": "b is the first character and n is the last character",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "!!box**",
     "output": "! is the first character and * is the last character",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "house",
     "output": "h is the first character and e is the last character",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Input, String indexes, format method"
     }
    ],
    "files": [
     "code/strings/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT capture input from the user and determine the first and last characters of a string"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3117457165",
  "source": {
   "name": "coding exercise 2 strings",
   "showName": false,
   "instructions": "**Reminder**, do not put a prompt when collecting user input. Just use `input()`",
   "command": "python3 code/strings/exercise2.py",
   "preExecuteCommand": "",
   "guidance": "The code below is one possible solution for the problem. Start by creating a variable `txt` that captures input from the user. Since you need as many lines of output as there are characters in the string `txt`, write a for loop that is in the range of the length of `txt`. For each line of output, you want the the user input to appear as many times as its length, multiply `txt` by its length.\n\n```python\ntxt = input()\nfor i in range(len(txt)):\n    print(txt * len(txt))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "hike",
     "output": "hikehikehikehike\nhikehikehikehike\nhikehikehikehike\nhikehikehikehike",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "to",
     "output": "toto\ntoto",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "!",
     "output": "!",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String length, repeating a string"
     }
    ],
    "files": [
     "code/strings/exercise2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT repeat a string with a loop"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2504384012",
  "source": {
   "name": "coding exercise 3 strings",
   "showName": false,
   "instructions": "**Reminder**, do not put a prompt when collecting user input. Just use `input()`\n",
   "command": "python3 code/strings/exercise3.py",
   "preExecuteCommand": "",
   "guidance": "Here is one possible solution to the problem. You will need two variables. The first one is `txt` and it captures the user input. The second variable will hold the `u`, `l`, and `-` characters. This variable is called `second_string` and is set to an empty string. Loop through each character of `txt`. If the character is lowercase, add a `l` to `second_string`. If the character is uppercase, add a `u` to `second_string`. If the character is neither uppercase or lowercase (i.e. it is a number of a symbol), add a `-` to `second_string`. Finally print `txt` and then print `second_string`.\n\n```python\ntxt = input()\nsecond_string = \"\"\nfor char in txt:\n    if char.islower():\n        second_string += \"l\"\n    elif char.isupper():\n        second_string += \"u\"\n    else:\n        second_string += \"-\"\n\nprint(second_string)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "Cat!",
     "output": "Ull-",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "*h*A*t*",
     "output": "-l-u-l-",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "1$%!",
     "output": "----",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "python"
     },
     {
      "name": "Category",
      "value": "String iteration, string methods, string concatenation"
     }
    ],
    "files": [
     "code/strings/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT parse a string"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3592969337",
  "source": {
   "name": "coding exercise 4 strings",
   "showName": false,
   "instructions": "**Reminder**, do not put a prompt when collecting user input. Just use `input()`.",
   "command": "python3 code/strings/exercise4.py",
   "preExecuteCommand": "",
   "guidance": "Here is one possible solution to the problem. First, start with the variable `txt` to collect input from the user. The next thing to do is find the midpoint of `txt`. You can divide the length of `txt` by 2. However, if you use the regular division symbol (`/`), you will generate a float if the length is odd. The midpoint will be used to find the index of the string where the split should happen. Indexes are only integers. Instead, use the floor division operator (`//`) as it will only return an integer. Now that you have the midpoint, slice `txt` from index 0 up to (but not including) the midpoint. Create the second half by slicing txt from the midpoint to the end of the string. Finally, print the first half and second half.\n\n```python\ntxt = input()\nmidpoint = len(txt) // 2\nfirst_half = txt[:midpoint]\nsecond_half = txt[midpoint:]\nprint(first_half)\nprint(second_half)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "coding is fun",
     "output": "coding\n is fun",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "mouse",
     "output": "mo\nuse",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "hello world!",
     "output": "hello \nworld!",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Slice a string"
     }
    ],
    "files": [
     "code/strings/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT find the midpoint of a string and print the first and second halves"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2019961366",
  "source": {
   "name": "coding exercise 5 strings",
   "showName": false,
   "instructions": "**Reminder**, do not put a prompt when collecting user input. Just use `input()`.",
   "command": "python3 code/strings/exercise5.py",
   "preExecuteCommand": "",
   "guidance": "Here is one possible solution to the problem. Create a variable `txt` to capture input from the user. You will also need a variable for the length of `txt`, and another variable `swapped_string` set to an empty string. \n```python\ntxt = input()\nlength = len(txt)\nswapped_string = \"\"\n```\nYou cannot use a regular for loop for this problem. First, you need to increment the index (`i`) of the loop by two because you want to swap the characters two at a time. Since you will be dealing with the character at `i` and `i + 1` you want to stop the loop from running all the way to the end of the string. If `i` is the last index and you try to access `i + 1`, that will cause an error. So stop the loop at the length of `txt` - 1. The for loop should go from index 0 to the length of `txt` - 1 and increment by 2. \n```python\nfor i in range(0, length - 1, 2):\n```\nInside the loop, take the character from `i` + 1 and concatenate it to `swapped_string`. Then concatenate the character at `i`. Once the loop has finished, print `swapped_string`.\n```python\n    swapped_string += txt[i + 1]\n    swapped_string += txt[i]\n\nprint(swapped_string)\n```\nThe final code looks like this:\n```python\ntxt = input()\nlength = len(txt)\nswapped_string = \"\"\n\nfor i in range(0, length - 1, 2):\n    swapped_string += txt[i + 1]\n    swapped_string += txt[i]\n\nprint(swapped_string)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "sips",
     "output": "issp",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "acac",
     "output": "caca",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "^4h-12",
     "output": "4^-h21",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String iteration, string concatenation"
     }
    ],
    "files": [
     "code/strings/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT swap characters in a string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1199134570",
  "source": {
   "name": "reading question writing to a file",
   "showName": false,
   "instructions": "## Reading Question\nWhat two parameters are passed to the `open` command?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "1c251c1a-3b02-9cba-0749-d5e5ed3ebd30",
     "correct": false,
     "answer": "The text to be added to the file and the file size."
    },
    {
     "_id": "4252245a-8777-b98f-ee88-d551ff0dee3d",
     "correct": true,
     "answer": "The file to be opened and the mode."
    },
    {
     "_id": "db325ca1-bb90-ac91-9f19-13bddbc29214",
     "correct": false,
     "answer": "The file extension and the file name."
    },
    {
     "_id": "e99e53d7-b602-7b20-9042-9de4fc83d0fa",
     "correct": false,
     "answer": "The file name and the text to write to the file."
    }
   ],
   "guidance": "The `open` command requires the file to be opened and the mode in which to open the file.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Open a file"
     }
    ],
    "files": [
     "code/files/writing.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/writing.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT use `open` to open a file "
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1430141663",
  "source": {
   "name": "reading question writing a file with multiline strings",
   "showName": false,
   "instructions": "## Reading Questions\nRearrange the code blocks below to create a program that writes the following text to a file:\n\n```\nOnce upon a time, in\na land far, far away\nthere lived a king and queen.\n```\n\n**Note**, start with the variable declaration for `lines_to_write`. You will not use all of the code blocks.",
   "initial": "lines_to_write = [\"Once upon a time, in\\n\", \"a land far, far away\\n\", \"lived a king and queen.\"]\noutput_file = open(\"story.txt\", \"w\")\noutput_file.writelines(lines_to_write)\noutput_file.close()\noutput_file = open(\"story.txt\") #distractor\nlines_to_write = [\"Once upon a time, in\", \"a land far, far away\", \"lived a king and queen.\"] #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Since you want each line of text to appear on a separate line, use the `lines_to_write` with the newline character (`\\n`). Also, `output` needs a file name and a mode. Be sure to use the `open` command with `\"w\"`.\n\n```python\nlines_to_write = [\"Once upon a time, in\\n\", \"a land far, far away\\n\", \"lived a king and queen.\"]\noutput_file = open(\"story.txt\", \"w\")\noutput_file.writelines(lines_to_write)\noutput_file.close()\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Multiline strings"
     }
    ],
    "files": [
     "code/files/multiline-strings-write.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/multiline-strings-write.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT write a multiline string to a file"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1777626410",
  "source": {
   "name": "reading question append mode",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below.",
   "text": "The <<<append>>> mode will add new text to a file without erasing its contents.\nThe <<<write>>> mode will overwrite the file with new text.",
   "guidance": "The append mode will add new text to a file without erasing its contents.\nThe write mode will overwrite the file with new text.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Append mode, write mode"
     }
    ],
    "files": [
     "code/files/append.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/append.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between write and append modes",
   "tokens": {
    "blank": [
     "append",
     "write"
    ],
    "text": [
     "The ",
     0,
     " mode will add new text to a file without erasing its contents.\nThe ",
     0,
     " mode will overwrite the file with new text."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3882923409",
  "source": {
   "name": "reading question reading a file",
   "showName": false,
   "instructions": "## Reading Question\nWhat is the biggest difference between read mode and write/append modes when referencing a file that does not exist?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "c1ea06f7-47d3-afdc-1ba8-9d978530a2b9",
     "correct": false,
     "answer": "All three will create a new file when reading, writing, or appending a file that does not exist."
    },
    {
     "_id": "5be44e6a-d70b-14c2-81df-9ff4b1651dd7",
     "correct": false,
     "answer": "Read and write will create a new file, but append will cause an error if the file does not exist."
    },
    {
     "_id": "44d5e19a-7263-7bbe-3f4d-53f575a64af4",
     "correct": false,
     "answer": "All three will cause an error when reading, writing, or appending a file that does not exist."
    },
    {
     "_id": "608d4a65-f992-cac1-d8b5-ef175b5be0a6",
     "correct": true,
     "answer": "Reading a file that does not exist will cause an error. Writing or appending a file that does not exist will cause the creation of this file."
    }
   ],
   "guidance": "Both write and append modes will create a file if it does not already exist. Read mode will cause an error if the file does not already exist.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Read mode"
     }
    ],
    "files": [
     "code/files/read.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/read.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate how the three modes handle a file that does not exist"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2796587801",
  "source": {
   "name": "reading question file iteration for loop",
   "showName": false,
   "instructions": "## Reading Question\nWhat is the difference between these blocks of code?\n\n### Code Block 1\n```python\nwith open(\"my_file.txt\", \"r\") as read_file:\n    print(read_file.readlines())\n```\n\n### Code Block 2\n```python\nwith open(\"my_file.txt\", \"r\") as read_file:\n    for line in read_file.readlines():\n        print(line)\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "4639de80-72ce-34d0-2a12-658548f9aec6",
     "correct": false,
     "answer": "Both code blocks produce lists of strings."
    },
    {
     "_id": "c7919ff1-a09a-5eda-d699-3964020ef8db",
     "correct": false,
     "answer": "Code block 1 produces a \"normal\" looking text. Code block 2 produces a list of strings."
    },
    {
     "_id": "6e88c18c-397d-f952-3413-83af24bc3f69",
     "correct": true,
     "answer": "Code block 1 produces a list of strings. Code block 2 produces a \"normal\" looking text."
    },
    {
     "_id": "1f79cb5c-410c-72c8-b3d5-193df4f3eeed",
     "correct": false,
     "answer": "Both code blocks produce \"normal\" looking text."
    }
   ],
   "guidance": "Code block 1 produces a list of all of the strings. So you will see quotation marks, square brackets (`[`), and newline characters (`\\n`).\n\nCode block 2 loops through the list of strings and prints each string. There are no square brackets, quotation marks, or newline characters. The text appears \"normal\".",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Reading a file, file iteration"
     }
    ],
    "files": [
     "code/files/file-iteration.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/file-iteration.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between printing the output of readlines and looping through readlines"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2299572197",
  "source": {
   "name": "reading question readline vs readlines",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below.",
   "text": "The <<<readlines>>> method reads all of the text file at once and returns a list of all of the strings.\n\nThe <<<readline>>> method reads the text file one line at a time.",
   "guidance": "The `readlines` method reads all of the text file at once and returns a list of all of the strings.\n\nThe `readline` method reads the text file one line at a time.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "python"
     },
     {
      "name": "Category",
      "value": "Read file, readline, readlines"
     }
    ],
    "files": [
     "code/files/file-iteration.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/file-iteration.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain the difference between readline and readlines",
   "tokens": {
    "blank": [
     "readlines",
     "readline"
    ],
    "text": [
     "The ",
     0,
     " method reads all of the text file at once and returns a list of all of the strings.\n\nThe ",
     0,
     " method reads the text file one line at a time."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-547217630",
  "source": {
   "name": "reading question readline vs readlines",
   "showName": false,
   "instructions": "## Reading Questions\nFill in the blanks below.",
   "text": "The <<<readlines>>> method reads all of the text file and returns all of the strings in a list.\n\nThe <<<readline>>> method reads one string at a time.",
   "guidance": "The `readlines` method reads all of the text file and returns all of the strings in a list.\n\nThe `readline` method reads one string at a time.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "File iteration, readline, readlines"
     }
    ],
    "files": [
     "code/files/while-iteration.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/while-iteration.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain the difference between readline and readlines",
   "tokens": {
    "blank": [
     "readlines",
     "readline"
    ],
    "text": [
     "The ",
     0,
     " method reads all of the text file and returns all of the strings in a list.\n\nThe ",
     0,
     " method reads one string at a time."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1830585668",
  "source": {
   "name": "reading question file input seek",
   "showName": false,
   "instructions": "## Reading Question\nAssume you have opened a text file with the variable `my_text`. Which command will go to the 35th character?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "4a9ae757-28d0-3004-7f37-ea4639b9d723",
     "correct": true,
     "answer": "my_text.seek(34)"
    },
    {
     "_id": "1497ecf8-b24e-e841-d90a-bbcaf849a608",
     "correct": false,
     "answer": "read_file.seek(34)"
    },
    {
     "_id": "ad9d17a9-29b0-9e48-442f-3053befe461d",
     "correct": false,
     "answer": "my_text.search(35)"
    },
    {
     "_id": "e6008954-b704-a7a2-24ed-4785bf72aa86",
     "correct": false,
     "answer": "my_text.seek(35)"
    }
   ],
   "guidance": "The variable that represents the text file is named `my_file` and the method to find a specific character is `seek`. You are looking for the 35th character, and the `seek` method starts with index 0. So the 35th character would be index `34`.\n\n`my_file.seek(34)`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Seek method"
     }
    ],
    "files": [
     "code/files/seek.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/seek.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT use the seek method to find a specific character"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-4261679209",
  "source": {
   "name": "formtive assessment 1 writing to a file",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below to create a program that writes the following information to the file `tongue_twister.txt`.\n\n```\nPeter Piper picked a peck of pickled peppers\nA peck of pickled peppers Peter Piper picked\nIf Peter Piper picked a peck of pickled peppers\nWhere’s the peck of pickled peppers Peter Piper picked?\n```\n\n**Note**, not all of the code blocks will be used.",
   "initial": "with open(\"tongue_twister.txt\", \"w\") as output_file:\n    output_file.writelines(\"Peter Piper picked a peck of pickled peppers\")\n    output_file.writelines(\"A peck of pickled peppers Peter Piper picked\")\n    output_file.writelines(\"If Peter Piper picked a peck of pickled peppers\")\n    output_file.writelines(\"Where’s the peck of pickled peppers Peter Piper picked?\")\noutput_file.close() #distractor\nwith open(\"my_file.txt\", \"w\") as output_file: #distractor\n",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "",
   "guidance": "There are two code blocks that are not a part of the solution. The first one is the block that opens the file `my_file.txt`. The instructions say to write to the file `tongue_twister.txt`. The second block that does not belong in the solution is `output_file.close()`. The `with open...` statement opens the file and automatically closes the file when done.\n\nOnce you have opened the correct file, follow the order of the tongue twister as stated in the question.\n\n```python\nwith open(\"tongue_twister.txt\", \"w\") as output_file:\n    output_file.writelines(\"Peter Piper picked a peck of pickled peppers\")\n    output_file.writelines(\"A peck of pickled peppers Peter Piper picked\")\n    output_file.writelines(\"If Peter Piper picked a peck of pickled peppers\")\n    output_file.writelines(\"Where’s the peck of pickled peppers Peter Piper picked?\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Write to a file"
     }
    ],
    "files": [
     "code/files/read-write-two-files.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/read-write-two-files.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT demonstrate writing to a file"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-838048899",
  "source": {
   "name": "formative assessment  append a file",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume there is a text file named `hand_grenade.txt`. Rearrange the code blocks below to create a program that will add the following text to the file. Your program should not alter any information already in the text file.\n\n```\nAnd Saint Attila raised the hand grenade up on high, saying, \"O Lord, bless this Thy hand grenade that, with it, Thou mayest blow Thine enemies to tiny bits in Thy mercy.\"\n```\n\n**Note**, not all of the code blocks will be used.",
   "initial": "with open(\"hand_grenade.txt\", \"a\") as output_file:\n    output_file.writelines('And Saint Attila raised the hand grenade up on high, saying, ')\n    output_file.writelines('\"O Lord, bless this Thy hand grenade that, with it, ')\n    output_file.writelines('Thou mayest blow Thine enemies to tiny bits in Thy mercy.\"')\nwith open(\"hand_grenade.txt\", \"w\") as output_file: #distractor\nwith open(\"hand_grenade.txt\", \"r\") as output_file: #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "There are three code blocks that begin `with open...`. The only difference between them is the mode. Since your program cannot alter any of the information already in the file, you need to use the append mode (`\"a\"`). The rest of the code needs to respect the order of the text as given in the question.\n\n```python\nwith open(\"hand_grenade.txt\", \"a\") as output_file:\n    output_file.writelines('And Saint Attila raised the hand grenade up on high, saying, ')\n    output_file.writelines('\"O Lord, bless this Thy hand grenade that, with it, ')\n    output_file.writelines('Thou mayest blow Thine enemies to tiny bits in Thy mercy.\"')\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Append mode"
     }
    ],
    "files": [
     "code/files/read-write-two-files.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/read-write-two-files.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT recognize when to use append mode"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-810907680",
  "source": {
   "name": "reading question read from a file write to another",
   "showName": false,
   "instructions": "## Reading Question\nLook at the two code examples carefully. Fill in the blanks below based on these code examples.\n\n### Code Example 1\n```python\nwith open(\"source.txt\", \"r\") as source, open(\"dest.txt\", \"w\") as dest:\n    for line in source.readlines():\n        dest.write(line)\n```\n\n### Code Example 2\n```python\nwith open(\"source.txt\", \"r\") as source, open(\"dest.txt\", \"w\") as dest:\n    for line in dest.readlines():\n        source.write(line)\n```",
   "text": "In Code Example 1, Python reads from the file stored in the variable <<<source>>> and writes to file stored in variable <<<dest>>>.\n\nIn Code Example 2, Python reads from the file stored in the variable <<<dest>>> and writes to file stored in variable <<<source>>>.",
   "guidance": "In the first code example, Python is reading from the file represented by the variable `source` and writes to the file represented by the variable `dest`. \n\nIn the second code example, Python is reading from the file represented by the variable `dest` and writes to the file represented by the variable `source`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Read a file, write to a file"
     }
    ],
    "files": [
     "code/files/read-write-two-files.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/read-write-two-files.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine which file is being read and which file is being written to",
   "tokens": {
    "blank": [
     "source",
     "dest",
     "dest",
     "source"
    ],
    "text": [
     "In Code Example 1, Python reads from the file stored in the variable ",
     0,
     " and writes to file stored in variable ",
     0,
     ".\n\nIn Code Example 2, Python reads from the file stored in the variable ",
     0,
     " and writes to file stored in variable ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3408853293",
  "source": {
   "name": "formative assessment reading a file",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume you have a text file called `story.txt`. Rearrange the code blocks below so that the program will print the text file as you would expect it to appear. **Note**, not all of the code blocks will be used.",
   "initial": "with open(\"story.txt\", \"r\") as input_file:\n    lines = input_file.readlines()\n    for line in lines:\n        print(line)\nwith open(\"story.txt\", \"a\") as input_file: #distractor\nprint(lines) #distractor\nlines = input_file.writelines() #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "In order to print the contents of a text file, you need to read the file first. Choose the `with open...` code block that has `\"r\"` to indicate read mode. When declaring the variable `lines` be sure to use the `readlines()` method and not `writelines()`. If you use `print(lines)`, you will not see the text in a \"normal\" manner. `lines` is a list that contains strings from the text. Printing this will output square brackets, quotation marks, newline characters, etc. Instead, loop through `lines` and print each string.\n\n```python\nwith open(\"story.txt\", \"r\") as input_file:\n    lines = input_file.readlines()\n    for line in lines:\n        print(lines)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Read a file"
     }
    ],
    "files": [
     "code/files/read-write-two-files.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT print each line of a text file"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1663568261",
  "source": {
   "name": "formative assessment iterating through a text file with a while loop",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume you have a text file named `my_file.txt`. Fill in the blanks below so the code reads the file and prints each line of the text file.",
   "text": "with open(\"my_file.txt\", <<<\"r\">>>) as input_file:\n    line = input_file.<<<readline()>>>\n    while line <<<!=>>> \"\":\n        print(<<<line>>>)\n        line = input_file.<<<readline()>>>",
   "guidance": "In order to print the content of a file, you need to read it first. The first blank sets the mode to read, `\"r\"`. The second blank is `readline()` so that the program can read the first line of the text file. The while loop should continue to run until it reaches the end of the file. The empty string (`\"\"`) is the end of the file. So the third blank is `!=`. To print the contents of the text file, blank four is the variable `line`. Finally, the loop needs the next line in the text file, so blank five is `readline()`.  \n\n```python\nwith open(\"my_file.txt\", \"r\") as input_file:\n    line = input_file.readline()\n    while line != \"\":\n        print(line)\n        line = input_file.readline()\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "File iteration, while loop"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT iterate through a text file with a while loop",
   "tokens": {
    "blank": [
     "\"r\"",
     "readline()",
     "!=",
     "line",
     "readline()"
    ],
    "text": [
     "with open(\"my_file.txt\", ",
     0,
     ") as input_file:\n    line = input_file.",
     0,
     "\n    while line ",
     0,
     " \"\":\n        print(",
     0,
     ")\n        line = input_file.",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-234456500",
  "source": {
   "name": "reading a csv file",
   "showName": false,
   "instructions": "## Reading Question\nWhat is the biggest difference between reading a text file and a CSV file?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "5f1fc8dd-977d-fdc0-7c7a-fff537ddceef",
     "correct": true,
     "answer": "You have to use `csv.reader` with a CSV file."
    },
    {
     "_id": "6e9f21e3-06cf-fb26-6e85-67412e3627b1",
     "correct": false,
     "answer": "Text and CSV files are read the exact same way."
    },
    {
     "_id": "3b564438-2991-2e78-e4f9-0a9ba8594b51",
     "correct": false,
     "answer": "With a text file you set the mode to `\"r\"`, but with a CSV you set the mode to `\"csv\"`."
    },
    {
     "_id": "8aba675d-73d2-10b0-e99e-516b9db6945b",
     "correct": false,
     "answer": "You have to use `text.reader` with text files."
    }
   ],
   "guidance": "For CSV files, you need to import the `csv` module and use the `csv.reader` before you can iterate over the file.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV files"
     }
    ],
    "files": [
     "code/files/csv-basics.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/csv-basics.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between reading text and csv files"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3850148086",
  "source": {
   "name": "how is a a row of csv data stored?",
   "showName": false,
   "instructions": "## Reading Question\nHow is the data for each row in a CSV file stored once it is read?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "8e332c30-b20b-a0d2-fe96-7c65c7e2677f",
     "correct": false,
     "answer": "As a string"
    },
    {
     "_id": "441c6d46-4706-a6db-c3b4-c787cb0ce655",
     "correct": true,
     "answer": "As a list of strings"
    },
    {
     "_id": "c74b7518-01ee-206a-18cf-e4ed5e3cf72b",
     "correct": false,
     "answer": "As a list of booleans"
    },
    {
     "_id": "7bfab932-bc9f-234b-00d7-9b2f4e1b127a",
     "correct": false,
     "answer": "As floats and ints"
    }
   ],
   "guidance": "Once a CSV has been read, each row is stored as a list of strings. So manipulating CSV information is based on working with lists (indexing, slicing, methods, functions, etc.) and working with strings (printing, methods, etc.).",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV"
     }
    ],
    "files": [
     "code/files/printing-csv.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/printing-csv.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify how CSV data is stored once it has been read"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2766230152",
  "source": {
   "name": "what does a delimiter do",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat is the purpose of a delimiter?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "4091b7a5-3d8d-b747-695a-a3270b542246",
     "correct": true,
     "answer": "A delimiter is a character that separates units of data."
    },
    {
     "_id": "d7990903-088a-2cbb-3d88-92d7c8726f65",
     "correct": false,
     "answer": "A delimiter is a character that marks the end of a line."
    },
    {
     "_id": "35ea5434-d258-eee4-62dd-0c370ff1156f",
     "correct": false,
     "answer": "A delimiter is a character that begins a line of data."
    },
    {
     "_id": "07c4e83a-5c96-5dd9-1730-1d0e24e2a7e9",
     "correct": false,
     "answer": "A delimiter is a character that marks the end of a file."
    }
   ],
   "guidance": "A delimiter is a character that separates units of data. In a CSV file, the default delimiter is a comma. Here is an example of a file with a comma delimiter:\n\nName,Breed\nBear,German Shepherd\nRoxy,Black Lab\nBella,Yorkie\nLucky,Terrier\n\nYou can change the delimiter in Python when reading the CSV file: \n\n`reader = csv.reader(data_file, delimiter=\"new_delimiter_goes_here\")`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, delimiter"
     }
    ],
    "files": [
     "code/files/delimiters.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/delimiters.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define a delimiter"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3611362990",
  "source": {
   "name": "what's the difference between writerow and writerows",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "text": "The <<<writerows>>> method can write either a single list of strings or a list of lists of strings to a CSV file.\n\nThe <<<writerow>>> method can write only a single list of strings to a CSV file.",
   "guidance": "The `writerows` method can write either a single list of strings or a list of lists of strings to a CSV file.\n\nThe `writerow` method can write only a single list of strings to a CSV file.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, writerow, writerows"
     }
    ],
    "files": [
     "code/files/write_csv.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/write_csv.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between writerow and writerows",
   "tokens": {
    "blank": [
     "writerows",
     "writerow"
    ],
    "text": [
     "The ",
     0,
     " method can write either a single list of strings or a list of lists of strings to a CSV file.\n\nThe ",
     0,
     " method can write only a single list of strings to a CSV file."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4246621000",
  "source": {
   "name": "what happens when you open a non-existent file in write mode",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat happens when Python tries to open a file in write mode, but the file does not exist?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6ac1e26e-4a9c-9ec8-bc32-96a507e18105",
     "correct": false,
     "answer": "An error will appear"
    },
    {
     "_id": "47dd9899-7ab4-cb3b-3236-278fd18c5efb",
     "correct": true,
     "answer": "Python will create the file"
    },
    {
     "_id": "27c1186f-7236-8e38-c86c-e347f184608e",
     "correct": false,
     "answer": "Python will ask you if you want to create the file"
    },
    {
     "_id": "385d9ab5-6bb7-dc07-7497-a1062fd361a0",
     "correct": false,
     "answer": "Nothing happens"
    }
   ],
   "guidance": "When Python tries to open a nonexistent file in write mode, the file will be created.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Open file, write mode"
     }
    ],
    "files": [
     "code/files/write_csv.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/write_csv.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain what happens when Python tries to open a nonexistent file in write mode"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3806101895",
  "source": {
   "name": "formative assessment reading a csv file",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume that you have a comma delimited file called `data.csv` Rearrange the code blocks below to read the file and print the contents line by line. **Note**, not all of the code blocks will be used.",
   "initial": "import csv\nwith open(\"data.csv\", \"r\") as input_file:\n    reader = csv.reader(input_file)\n    for row in reader:\n        print(row)\nwith open(\"data.csv\", \"w\") as input_file: #distractor\nreader = input_file #distractor\nfor row in input_file: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "There are three code blocks that do not belong in the solution. The code block that opens the file in write mode should be ignored. The next code block to ignore is the one that says `reader = input_file`. The `csv` module provides a `csv.reader`, which should be used with a CSV file. Lastly, ignore the code block that says `for row in input_file:`. The CSV file is represented by the `reader` variable, so the loop should iterate over `reader` not `input_file`.\n\nAlways start with the import statement. Next, open the file and assign it to the variable `input_file`. Since `input_file` is a CSV file, use `csv.reader` so you can iterate over it. Use a for loop to go through the CSV file line by line. Finally, print each row of the CSV file.\n\n```python\nimport csv\nwith open(\"data.csv\", \"r\") as input_file:\n    reader = csv.reader(input_file)\n    for row in reader:\n        print(row)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "python"
     },
     {
      "name": "Category",
      "value": "CSV, csv.reader"
     }
    ],
    "files": [
     "code/files/write_csv.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/write_csv.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT iterate over a CSV and print each row"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1884365233",
  "source": {
   "name": "formative assessment unpacking a CSV file",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume there exists a tab delimited CSV file called `data.csv`. The CSV file has two columns of data: a name and a color. There is no header row in the CSV file. Rearrange the code blocks below so that the program reads the file and uses the information from each row to generate a sentence like this:\n\nPatrick's favorite color is blue.\n\n**Note**, not all of the code blocks will be used.",
   "initial": "import csv\nwith open(\"data.csv\", \"r\") as input_file:\n    reader = csv.reader(input_file, delimiter=\"\\t\")\n    for name, color in reader:\n        print(\"{}'s favorite color is {}.\".format(name, color))\nreader = csv.reader(input_file) #distractor\nfor color, name in reader: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "There are two code blocks to ignore. The first one is `reader = csv.reader(input_file)`. This block does not tell Python that the file is tab delimited. The other block to ignore is `for color, name in reader:`. Order matters when unpacking the CSV file. The first column is names and the second is colors. The loop however would assign the names to the variable `color` because it came first. The output would be `blue's favorite color is Patrick.`.\n\nStart by importing the `csv` module. Then open the CSV file in read mode. Instruct `csvreader` that this is a tab delimited file. Iterate over `reader` while unpacking the first column into the variable `name` and the second column into the variable `color`. Print the sentence with the `format` method.\n\n```python\nimport csv\nwith open(\"data.csv\", \"r\") as input_file:\n    reader = csv.reader(input_file, delimiter=\"\\t\")\n    for name, color in reader:\n        print(\"{}'s favorite color is {}.\".format(name, color))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, tab delimited, unpacking"
     }
    ],
    "files": [
     "code/files/write_csv.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/write_csv.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT iterate over a tab delimited CSV file and unpack the contents into variable names"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3157619027",
  "source": {
   "name": "printing the contents of a text file stored in a variable",
   "showName": false,
   "instructions": "## Lab Question\n\nWhy does the code above say `print(text[0])` instead of `print(text)`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "5bc6ec38-43d6-1cc4-35b9-f723affc9152",
     "correct": false,
     "answer": "Both `print(text)` and `print(text[0])` print the same thing."
    },
    {
     "_id": "9cf0fe74-5d6b-c30c-a0dd-47855fa21262",
     "correct": false,
     "answer": "Using `print(text)` will cause an error."
    },
    {
     "_id": "3f412ad8-5d21-e254-cdfd-2910a8ecf41a",
     "correct": true,
     "answer": "The variable `text` is a list of strings. If you print `text`, it will print the entirety of the list — including square brackets and quotes. Printing `text[0]` will print just the text, no special characters."
    },
    {
     "_id": "ac27b8a2-3bc0-ee0b-85fe-56249be20a12",
     "correct": false,
     "answer": "Text files require `print(text[0])` while CSV files require `print(text)`."
    }
   ],
   "guidance": "The variable `text` is a list of strings. If you print `text`, it will print the entirety of the list — including square brackets and quotes. Printing `text[0]` will print just the text, no special characters. If you want the text, print the string inside the list, not the list itself.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Read mode, printing a file"
     }
    ],
    "files": [
     "code/files/lab1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/lab1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between print(text) and print(text[0]) when reading from a text file"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1780805107",
  "source": {
   "name": "changing the delimiter for CSV file",
   "showName": false,
   "instructions": "## Lab Question\n\nAssume the variable `input_file` is an opened CSV file. How would you declare the the `csv.reader` to indicate that the CSV file uses the `!` character as the delimiter?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "cc06cba8-fe73-fd54-7a52-676f5bb2f19c",
     "correct": true,
     "answer": "reader = csv.reader(input_file, delimiter=\"!\")"
    },
    {
     "_id": "bac2b38c-4299-8fab-a545-43baed4678ef",
     "correct": false,
     "answer": "reader = csv.reader(input_file, delimiter=!)"
    },
    {
     "_id": "2e5bfe3b-30ea-b415-001b-d1e592e4c8ba",
     "correct": false,
     "answer": "reader = csv.reader(input_file, delimiter=\"\\!\")"
    },
    {
     "_id": "33762c50-5b7e-5c7d-5e4c-98a14bc7da1f",
     "correct": false,
     "answer": "reader = csv.reader(input_file, delimiter=\"/!\")"
    }
   ],
   "guidance": "To change the delimiter of a CSV file, use the word `delimiter` followed by `=`. Put the delimiter between quotes, `\"!\"`. You do not need a `\\` because the exclamation point is not an escape character.\n\n```python\nreader = csv.reader(input_file, delimiter=\"!\")\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, delimiter"
     }
    ],
    "files": [
     "code/files/lab2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/lab2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT construct the code needed to change the delimiter character of a CSV file"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1343055727",
  "source": {
   "name": "default delimiter for csv.writer",
   "showName": false,
   "instructions": "## Lab Question\n\nWhat is the default delimiter for `csv.writer`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "ef941b0a-eb0b-ae73-0d6e-5e4f6c1a464f",
     "correct": false,
     "answer": "Space"
    },
    {
     "_id": "74fd7181-e64d-be11-fb5e-eda50c30b944",
     "correct": false,
     "answer": "Semi-colon"
    },
    {
     "_id": "094fb643-0279-f90e-89f3-c2344e1f7e28",
     "correct": false,
     "answer": "Tab"
    },
    {
     "_id": "ce768d52-7d20-9465-9b51-a6fd61263f68",
     "correct": true,
     "answer": "Comma"
    }
   ],
   "guidance": "The default delimiter for `csv.writer` is a comma. You can change the delimiter with `writer = csv.writer(file, delimiter=\"\\t\")`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, delimiter, csv.writer"
     }
    ],
    "files": [
     "code/files/lab3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/lab3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the default delimiter for csv.writer"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3180548474",
  "source": {
   "name": "write versus writelines",
   "showName": false,
   "instructions": "## Lab Question\n\nHow would the output have changed if `writelines` was used instead of `write`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "49d000c4-0088-9bb0-e838-06771062ea63",
     "correct": false,
     "answer": "There would have been an error"
    },
    {
     "_id": "3f3850e4-f431-a2c0-292d-37eb68a148be",
     "correct": false,
     "answer": "The output would have been written more than once"
    },
    {
     "_id": "9b180ac7-bf94-7245-7cbd-569c5c2809e5",
     "correct": true,
     "answer": "The output would have been the exact same"
    },
    {
     "_id": "11a83227-50fa-ae00-dd77-e7d6e46b2ea8",
     "correct": false,
     "answer": "`writelines` would have added an `\"s\"` to end of each line"
    }
   ],
   "guidance": "The output would have been exactly the same. The `write` method writes one string to the output file. `writelines` can write a single string and it can write a list of strings to the output file. Since the program was only writing a single line at a time, there would have been no change in the output.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Write, writelines"
     }
    ],
    "files": [
     "code/files/lab4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/lab4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between write and writelines"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3508746783",
  "source": {
   "name": "files coding exercise 1",
   "showName": false,
   "instructions": "Submit your code to be graded.",
   "command": "python3 code/files/exercise1.py",
   "preExecuteCommand": "",
   "guidance": "Here is one possible solution. The first three lines of your program are already given.\n\n```python\nimport os, sys\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\n```\n\nYou will need two variables; one to count the number of lines and another to count the number of characters. Set these variables to 0.\n\n```python\nline_count = 0\nchar_count = 0\n```\n\nOpen the text file in read mode.\n\n```python\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n```\n\nThis solution uses a while loop to read through the text file one line at a time. Start by reading the first line of the text file. Then start the loop, checking to see if the line from the text file is equal to `\"\"`.\n\n```python\n    line = input_file.readline()\n    while line != \"\":\n```\n\nFor each line read, increment the `line_count` variable by 1. Calculate the length of the line of text (which is a string) with the `len` function. Add this value to `char_count`. Read the next line from the text file.\n\n```python\n        line_count += 1\n        char_count += len(line)\n        line = input_file.readline()\n```\n\nOnce the loop has finished running, print the two variables with accompanying text.\n\n```python\nprint(\"{} lines\".format(line_count))\nprint(\"{} characters\".format(char_count))\n```\n\nHere is the full code:\n\n```python\nimport os, sys\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\n\nline_count = 0\nchar_count = 0\n\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    line = input_file.readline()\n    while line != \"\":\n        line_count += 1\n        char_count += len(line)\n        line = input_file.readline()\n\nprint(\"{} lines\".format(line_count))\nprint(\"{} characters\".format(char_count))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": ".guides/secure files-exercise-1-test-1.txt",
     "input": "",
     "output": "4 lines\n248 characters",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-1-test-2.txt",
     "input": "",
     "output": "7 lines\n940 characters",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-1-test-3.txt",
     "input": "",
     "output": "0 lines\n0 characters",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Read a file"
     }
    ],
    "files": [
     "code/files/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT read from a text file, count the number of lines of text and the number of characters"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3072203434",
  "source": {
   "name": "files coding exercise 2",
   "showName": false,
   "instructions": "Submit your code when you are ready.",
   "command": "python3 code/files/exercise2.py",
   "preExecuteCommand": "",
   "guidance": "Here is one way to solve the problem. The first three lines of the program are give, but do not forget to add the `csv` module since you are working with CSV files.\n\n```python\nimport os, sys, csv\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\n```\n\nThere are four columns of numbers, and you need to calculate the average of each. You need five variables: one variable for each of the four columns to calculate the total value of the column, and a fifth variable that keeps track of how many rows are in the CSV file. Set all of those variables to 0.\n\n```python\ntotal1 = 0\ntotal2 = 0\ntotal3 = 0\ntotal4 = 0\nrow_count = 0\n```\n\nNext, open the CSV file in read mode and pass it to the `csv.reader`.\n\n```python\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    reader = csv.reader(input_file)\n```\n\nThis solution uses the unpacking technique to \"pull apart\" the four numbers in each row of the CSV file.\n\n```python\n    for num1, num2, num3, num4 in reader:\n```\n\nIncrement the variable that counts the number of rows. Then add each number (`num1`, `num2`, etc.) to the appropriate variable (`total1`, `total2`, etc.). Remember, information taken from a CSV file always comes in as a string. You need to typecast the information into an integer (or a float).\n\n```python\n        row_count += 1\n        total1 += int(num1)\n        total2 += int(num2)\n        total3 += int(num3)\n        total4 += int(num4)\n```\n\nOnce the loop has finished running, print the totals divided by the number of rows.\n\n```python\nprint(\"{} {} {} {}\".format(total1/row_count, total2/row_count, total3/row_count, total4/row_count))\n```\n\nHere is the complete program.\n\n```python\nimport os, sys, csv\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\n\ntotal1 = 0\ntotal2 = 0\ntotal3 = 0\ntotal4 = 0\nrow_count = 0\n\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    reader = csv.reader(input_file)\n    for num1, num2, num3, num4 in reader:\n        row_count += 1\n        total1 += int(num1)\n        total2 += int(num2)\n        total3 += int(num3)\n        total4 += int(num4)\n\nprint(\"{} {} {} {}\".format(total1/row_count, total2/row_count, total3/row_count, total4/row_count))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": ".guides/secure files-exercise-2-test-1.csv",
     "input": "",
     "output": "15.0 2.0 8.0 4.0",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-2-test-2.csv",
     "input": "",
     "output": "1.0 2.0 3.0 4.0",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-2-test-3.csv",
     "input": "",
     "output": "3.0 4.0 5.0 6.0",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, read mode"
     }
    ],
    "files": [
     "code/files/exercise2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT read a CSV file and find the average for each column in the file"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1691073765",
  "source": {
   "name": "Lab challenge files",
   "showName": false,
   "instructions": "When you are ready, submit your code.",
   "command": "python3 code/files/lab-challenge.py",
   "preExecuteCommand": "",
   "guidance": "Here is one solution to the problem. First, start by importing the `os` module to create the path for the text file. Create the variable `path` and set its value to the text file's location.\n\n```python\nimport os\n\npath = \"student_folder/.labs\"\n```\n\nOpen the text file in read mode and read all of the lines of the text file.\n\n```python\nwith open(os.path.join(path, \"myanmar.txt\"), \"r\") as input_file:\n    lines = input_file.readlines()\n```\n\nIterate through `lines` and if the word `\"Burma\"` appears, print the line substituting `\"Myanmar\"` for `\"Burma\"`. Adding the `end=\"\"` to the print statement is not necessary. This bit of code removes the newline character so there are no blank lines between the text.\n\n```python\n    for line in lines:\n        if \"Burma\" in line:\n            print(line.replace(\"Burma\", \"Myanmar\"), end=\"\")\n```\n\nIf the word `\"Burma\"` does not appear, print the line of text with no modification. The `end=\"\"` is optional.\n\n```python\n        else:\n            print(line, end=\"\")\n```\n\nHere is the complete code.\n\n```python\nimport os\n\npath = \"student_folder/.labs\"\n\nwith open(os.path.join(path, \"myanmar.txt\"), \"r\") as input_file:\n    lines = input_file.readlines()\n    for line in lines:\n        if \"Burma\" in line:\n            print(line.replace(\"Burma\", \"Myanmar\"), end=\"\")\n        else:\n            print(line, end=\"\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "Myanmar is a country in Southeast Asia.\nThe capital of Myanmar is Naypyidaw.\nIts population is about 54 million people.\nMyanmar is a former British colony.",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Read a file"
     }
    ],
    "files": [
     "code/files/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT read from a text file and make keyword substitutions"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1653549181",
  "source": {
   "name": "files exercise 3",
   "showName": false,
   "instructions": "Submit your code when you are ready",
   "command": "python3 code/files/exercise3.py",
   "preExecuteCommand": "",
   "guidance": "Here is one solution to the problem. The first three lines of the program are given.\n\n```python\nimport os, sys\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\n```\n\nNext, open the file in read mode. Read all of the lines at once, and then reverse the order of the list.\n\n```python\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    lines = input_file.readlines()\n    lines.reverse()\n```\n\nIterate through the list of strings and print each one. \n\n```python\n    for line in lines:\n        print(line)\n```\n\nHere is the complete code.\n\n```python\nimport os, sys\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\n\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    lines = input_file.readlines()\n    lines.reverse()\n    for line in lines:\n        print(line)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": ".guides/secure files-exercise-3-test-1.txt",
     "input": "",
     "output": "For the moment, at least, I was free.\nWith a steady movement—cautious, sidelong, shrinking, and slow—I slid from the embrace of the bandage and beyond the reach of the scimitar.\nAt a wave of my hand my deliverers hurried tumultuously away.\nBut the moment of escape had arrived.\nTwice again it swung, and a sharp sense of pain shot through every nerve.\nIt had cut through the linen beneath.\nIt had divided the serge of the robe.\nBut the stroke of the pendulum already pressed upon my bosom.\nThe surcingle hung in ribands from my body.\nI at length felt that I was free.\nNor had I erred in my calculations—nor had I endured in vain.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-3-test-2.txt",
     "input": "",
     "output": "The ringing became more distinct:—It continued and became more distinct: I talked more freely to get rid of the feeling: but it continued and gained definiteness—until, at length, I found that the noise was not within my ears.\nMy head ached, and I fancied a ringing in my ears: but still they sat and still chatted.\nBut, ere long, I felt myself getting pale and wished them gone.\nThey sat, and while I answered cheerily, they chatted of familiar things.\nI was singularly at ease.\nMy manner had convinced them.\nThe officers were satisfied.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-3-test-2.txt",
     "input": "",
     "output": "Only this, and nothing more.'\n'Tis some visiter,' I muttered, 'tapping at my chamber door—\nAs of some one gently rapping, rapping at my chamber door.\nAs of some one gently rapping, rapping at my chamber door.\nWhile I nodded, nearly napping, suddenly there came a tapping,\nOver many a quaint and curious volume of forgotten lore,\nOnce upon a midnight dreary, while I pondered, weak and weary,",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Read file"
     }
    ],
    "files": [
     "code/files/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT read a text file, reverse its contents, and print it"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-135786605",
  "source": {
   "name": "files exercise 4",
   "showName": false,
   "instructions": "Submit your code when you are ready.",
   "command": "python3 code/files/exercise4.py",
   "preExecuteCommand": "",
   "guidance": "Here is one possible solution to the problem. The first three lines are given to you. Do not forget about the `csv` module.\n\n```python\nimport os, sys, csv\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\n```\n\nYou will also need two more variables. One to keep track of the oldest age and another to keep track of the oldest name. Set the oldest age variable to 0 and the oldest person to an empty string.\n\n```python\noldest_age = 0\noldest_name = \"\"\n```\n\nOpen the CSV file and use the `csv.reader` to parse the CSV file. Since this is a tab delimited file, make sure to tell Python to use tabs when separating the data.\n\n```python\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    reader = csv.reader(input_file, delimiter=\"\\t\")\n```\n\nBefore you can start searching the file for the oldest person, you need to account for the first row that has the header files. Use the `next` command to skip this row, and then start iterating over the CSV file. Use the unpacking method to give each piece of information in a row its own variable name.\n\n```python\n    next(reader)\n    for name, age, career in reader:\n```\n\nCompare the `age` in the row to the variable `oldest_age`. Remember, data in a CSV file is stored as a string. Typecast `age` as an int to make this comparison. If `age` is greater than `oldest_age`, then update `oldest_age` with `age`. Also set `oldest_name` to `name`.\n\n```python\n        if int(age) > oldest_age:\n            oldest_age = int(age)\n            oldest_name = name\n```\n\nOnce the loop has finished running, print the name of the oldest person.\n\n```python\nprint(\"The oldest person is {}.\".format(oldest_name))\n```\n\nHere is the final code:\n```python\nimport os, sys, csv\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\noldest_age = 0\noldest_name = \"\"\n\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    reader = csv.reader(input_file, delimiter=\"\\t\")\n    next(reader)\n    for name, age, career in reader:\n        if int(age) > oldest_age:\n            oldest_age = int(age)\n            oldest_name = name\n            \nprint(\"The oldest person is {}.\".format(oldest_name))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": ".guides/secure files-exercise-4-test-1.csv",
     "input": "",
     "output": "The oldest person is Raphael.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-4-test-2.csv",
     "input": "",
     "output": "The oldest person is Ringo.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-4-test-3.csv",
     "input": "",
     "output": "The oldest person is Agatha.",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, tab delimited"
     }
    ],
    "files": [
     "code/files/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT read a tab delimited CSV file and print the oldest person in the file"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-4037337142",
  "source": {
   "name": "files exercise 5",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 code/files/exercise5.py",
   "preExecuteCommand": "",
   "guidance": "Here is one possible solution to the problem. The first three lines are already given. Remember, reading CSV files requires the `csv` module. You will also need an empty list to store all of the cities in the Southern Hemisphere. Declare `cities` and set it to an empty list.\n\n```python\nimport os, sys, csv\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\ncities = []\n```\n\nOpen the CSV file in read mode. Then use `csv.reader` to parse the CSV file. Since the file has headers, use the `next` command to skip over them.\n\n```python\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    reader = csv.reader(input_file)\n    next(reader)\n```\n\nIterate through the CSV file while using the unpacking method to give each item in the row its own variable name. Check to see if the `latitude` is a negative number, which represents the Southern Hemisphere. Data stored in a CSV file are strings, so typecast `latitude` as an int. If the `city` is in the Southern Hemisphere, add it to the `cities` list.\n\n```python\n    for city, country, latitude, longitude in reader:\n        if int(latitude) < 0:\n            cities.append(city)\n```\n\nOnce the loop has finished running, you need to print the results. There are two parts to the results: the text `\"The following cities are in the Southern Hemisphere: \"` and the list of cities. Print the first part, but be sure to add `end=\"\"` so that the list of cities does not appear on the next line. The iterate over the list `cities`.\n\n```python\nprint(\"The following cities are in the Southern Hemisphere: \", end=\"\")\nfor city in cities:\n```\n\nAs for printing the cities, either you print the city followed by a comma and a space, or you print the city followed by a period. Check to see if the city you are printing is the last element in the list `cities`. If yes, print the city and a period. In all other cases print the city followed by a comma and a space.\n\n```python\n    if city == cities[-1]:\n        print(city + \".\")\n    else:\n        print(city, end=\", \")\n```\n\nHere is all of the code:\n\n```python\nimport os, sys, csv\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\ncities = []\n\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    reader = csv.reader(input_file)\n    next(reader)\n    for city, country, latitude, longitude in reader:\n        if int(latitude) < 0:\n            cities.append(city)\n            \nprint(\"The following cities are in the Southern Hemisphere: \", end=\"\")\nfor city in cities:\n    if city == cities[-1]:\n        print(city + \".\")\n    else:\n        print(city, end=\", \")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": ".guides/secure files-exercise-5-test-1.csv",
     "input": "",
     "output": "The following cities are in the Southern Hemisphere: Santiago, Tananarive, Nairobi, Montevideo.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-5-test-2.csv",
     "input": "",
     "output": "The following cities are in the Southern Hemisphere: Lima, Rio de Janeiro.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-5-test-3.csv",
     "input": "",
     "output": "The following cities are in the Southern Hemisphere: Melbourne, Asunción.",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, read mode"
     }
    ],
    "files": [
     "code/files/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT read a CSV and print out relevant information"
  }
 }
]